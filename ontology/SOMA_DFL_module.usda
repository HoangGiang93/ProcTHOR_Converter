#usda 1.0

class "_class_SOMA_namespace" (
    prepend apiSchemas = ["RdfAPI"]
)
{
    string rdf:namespace = "http://www.ease-crc.org/ont/SOMA.owl#"
}

def "SOMA"
{
    class "_class_AgentRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AgentRole"
        string rdf:definition = """A role classifying an Agent responsible for performing an Action.

The entity playing an AgentRole is endowed with sentience and the capacity to deliberately choose actions in pursuit of goals. This distinguishes Agents from other causes that could bring an event about."""
    }

    class "_class_Appliance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Appliance"
        string rdf:definition = "A device designed to perform a specific task, and that can be operated in some way."
    }

    class "_class_Armchair" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Armchair"
    }

    class "_class_Arranging" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Arranging"
        string rdf:definition = "A task in which an Agent places a collection of objects at some set of relative poses to each other."
    }

    class "_class_Assembling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Assembling"
        string rdf:definition = "A task in which an Agent connects some objects such that they form a cohesive whole, and which also imposes constraints on the objects' relative motions. Often, the objects that make up an assemblage can also be separated again."
    }

    class "_class_BakedGood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BakedGood"
    }

    class "_class_BedsideTable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BedsideTable"
    }

    class "_class_BeneficiaryRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BeneficiaryRole"
        string rdf:definition = "A role classifying an agent for whose benefit an action is performed."
    }

    class "_class_Blade" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Blade"
    }

    class "_class_Bottle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Bottle"
    }

    class "_class_Bowl" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Bowl"
    }

    class "_class_Box" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Box"
    }

    class "_class_Bread" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Bread"
    }

    class "_class_BreadKnife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BreadKnife"
    }

    class "_class_BreakfastPlate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BreakfastPlate"
    }

    class "_class_Building" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Building"
    }

    class "_class_CanBeSatOn" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CanBeSatOn"
    }

    class "_class_CanCut" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CanCut"
        string rdf:definition = "The disposition of an object (the tool) to cut other objects. Such as a knife has cutting ability to cut a cucumber into pieces."
    }

    class "_class_Carafe" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Carafe"
    }

    class "_class_CausativeRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CausativeRole"
        string rdf:definition = """A role classifying objects that are responsible in bringing about an event.

The paradigmatic example is the Agent performing an Action -- the Agent is the effective cause of the Action it performs. However, not all objects causing events are agents."""
    }

    class "_class_Ceiling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Ceiling"
    }

    class "_class_CeramicCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CeramicCooktop"
    }

    class "_class_CerealBox" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CerealBox"
    }

    class "_class_Cleaning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cleaning"
        string rdf:definition = "This task in which an agent restores all the objects to their destined locations, wiping a specific object"
    }

    class "_class_Closing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Closing"
        string rdf:definition = "A task in which an Agent manipulates a container so as to block access to its interior."
    }

    class "_class_ClosingDisposition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ClosingDisposition"
    }

    class "_class_CoffeeCarafe" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoffeeCarafe"
    }

    class "_class_CoffeeTable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoffeeTable"
    }

    class "_class_CoilCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoilCooktop"
    }

    class "_class_CommunicationTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommunicationTopic"
        string rdf:definition = """A role that appears in communication tasks, and indicates what the communication is about.

CommunicationTopic can only classify a Social object that participates in an Action that is classified as (the execution of) a CommunicationTask.

Note that classifies here is used in the plays-role sense. This isn't to say that the social object, ie the information exchanged in the communication, is an instance of the topic. Rather, the topic role refers to what the information is about.

For example, if the topic of a communication is flowers, this does not mean the words themselves are flowers, merely that, in some sense, they are about flowers."""
    }

    class "_class_Compartment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Compartment"
    }

    class "_class_Connectivity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Connectivity"
        string rdf:definition = "The disposition of an object (the connected object) to establish a connection with others."
    }

    class "_class_Constructing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Constructing"
        string rdf:definition = "A task in which an Agent creates a new physical object."
    }

    class "_class_Containment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Containment"
        string rdf:definition = "Classifies States in which an object is placed inside another."
    }

    class "_class_Cooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cooktop"
    }

    class "_class_Countertop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Countertop"
    }

    class "_class_Covering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Covering"
    }

    class "_class_Crockery" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Crockery"
    }

    class "_class_Cup" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cup"
    }

    class "_class_Cupboard" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cupboard"
    }

    class "_class_Cutlery" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cutlery"
    }

    class "_class_Cuttability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cuttability"
        string rdf:definition = "The disposition of an object (the barrier) which makes it able to be cut down (into pieces) usually by some other object with role as a Cutter. Such as a cucumber has cuttability disposition which can be cut by a knife."
    }

    class "_class_Cutting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cutting"
        string rdf:definition = "The goal of this task is to separate one or more pieces from some target object by means of cutting into its constituent material. Unlike a disassembly, a cut is usually not easily reversible."
    }

    class "_class_CuttingTool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CuttingTool"
    }

    class "_class_Delivering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Delivering"
        string rdf:definition = "A task in which an Agent brings an item that the Agent already carries to a specified target."
    }

    class "_class_DesignedChair" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedChair"
    }

    class "_class_DesignedComponent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedComponent"
        string rdf:definition = "An object designed to be part or element of a larger whole."
    }

    class "_class_DesignedContainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedContainer"
        string rdf:definition = "An item designed to be able to hold some other items, preventing their free movement and/or protecting them from outside influence. Containers may be used for storage, or to obtain control over items that are otherwise hard to manipulate directly (e.g. liquids)."
    }

    class "_class_DesignedFurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedFurniture"
        string rdf:definition = "An object used to make a room or building suitable for living or working."
    }

    class "_class_DesignedHandle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedHandle"
    }

    class "_class_DesignedSpade" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedSpade"
    }

    class "_class_DessertFork" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DessertFork"
    }

    class "_class_Destination" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Destination"
        string rdf:definition = "A role classifying the location where an event or object is directed towards."
    }

    class "_class_Dicing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dicing"
        string rdf:definition = 'A particular kind of cutting where the goal is to produce small pieces out of some object or material. Unlike slices, the pieces to be obtained do not have one or two dimensions being more prominent than others. "Dice", the pieces dicing results in, are approximately cubic.'
    }

    class "_class_DinnerPlate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DinnerPlate"
    }

    class "_class_Dish" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dish"
    }

    class "_class_Dishwasher" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dishwasher"
    }

    class "_class_DishwasherTab" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DishwasherTab"
    }

    class "_class_Dispenser" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dispenser"
    }

    class "_class_Disposition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Disposition"
        string rdf:definition = "The tendency of an object (the bearer) to make certain events happen with others (the triggers)."
    }

    class "_class_Door" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Door"
    }

    class "_class_Drawer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Drawer"
    }

    class "_class_Dropping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dropping"
        string rdf:definition = """The dropped object falls mainly under the influence of gravity. However, an agent may also drop something during navigation. The difference to 'Throwing' is that there is no 'Limb motion' which is a constitiuent of the action.

'Dropping' is intentional. Dropping by accident may not has a phase to release the grasp. It could be that the grasp was not strong enough and the objects \"slips\" away."""
    }

    class "_class_ElectricCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ElectricCooktop"
    }

    class "_class_Enclosing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Enclosing"
        string rdf:definition = "The disposition of an object (the container) to contain other objects by enclosing them to prevent their free movement."
    }

    class "_class_EventAdjacentRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "EventAdjacentRole"
        string rdf:definition = """A role classifying a participant in an event.

In linguistics, this is also known as a thematic role."""
    }

    class "_class_ExperiencerRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExperiencerRole"
        string rdf:definition = "A role used in frame semantics to classify agents performing perception actions, or being the subjects affected by some biological process."
    }

    class "_class_Fetching" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Fetching"
        string rdf:definition = "A task in which an Agent retrieves an object from a particular location, which puts the object under the Agent's control, who can now e.g. transport the object somewhere else; this task may include repositioning the Agent to better reach the object. Note that while in normal linguistic use fetch can mean transport, we use it here to refer only to (a part of) the first stage of transport."
    }

    class "_class_Flipping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Flipping"
        string rdf:definition = "The task in which the agent turns an object over by using a tool or by manipulating"
    }

    class "_class_Floor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Floor"
    }

    class "_class_Fluid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Fluid"
        string rdf:definition = "A substance with a consistency such that it can flow or diffuse."
    }

    class "_class_Fork" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Fork"
    }

    class "_class_FreezerCompartment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FreezerCompartment"
    }

    class "_class_FunctionalPart" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalPart"
        string rdf:definition = "Parts of an agent or an artifact are considered as functional parts."
    }

    class "_class_GasCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GasCooktop"
    }

    class "_class_Glass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Glass"
    }

    class "_class_Graspability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Graspability"
        string rdf:definition = "The disposition of an object (e.g. the handle) to afford grasping the object."
    }

    class "_class_Grasping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Grasping"
        string rdf:definition = "A task in which an Agent uses its end effectors to grasp an object, thus gaining kinematic control over it."
    }

    class "_class_Hotplate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Hotplate"
    }

    class "_class_Impeding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Impeding"
    }

    class "_class_InductionCooktop" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InductionCooktop"
    }

    class "_class_Inserting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Inserting"
    }

    class "_class_Instrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Instrument"
        string rdf:definition = "An object used to carry out the event."
    }

    class "_class_Jar" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Jar"
    }

    class "_class_Kitchen" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Kitchen"
    }

    class "_class_KitchenCabinet" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KitchenCabinet"
    }

    class "_class_KitchenKnife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KitchenKnife"
    }

    class "_class_KitchenUnit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KitchenUnit"
    }

    class "_class_Knife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Knife"
    }

    class "_class_Lid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Lid"
    }

    class "_class_Lifting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Lifting"
        string rdf:definition = "todo: how to distinguish from e.g. 'pushing from the table'"
    }

    class "_class_Linkage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Linkage"
        string rdf:definition = "The disposition of an object (the linked object) to establish a connection with others by being linked together."
    }

    class "_class_Location" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Location"
        string rdf:definition = "A role classifying a location of interest, often specified as a spatial relation between several objects, themselves usually classified by spatial relation roles."
    }

    class "_class_MilkBottle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MilkBottle"
    }

    class "_class_MilkPack" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MilkPack"
    }

    class "_class_Mixing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Mixing"
        string rdf:definition = "A task by which an Agent combines several entities, such that the combination is difficult or in practice impossible to reverse."
    }

    class "_class_Opening" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Opening"
        string rdf:definition = "A task in which an Agent manipulates a container so as to expose its interior."
    }

    class "_class_Origin" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Origin"
        string rdf:definition = "A role classifying the location where an event or object originated."
    }

    class "_class_Oven" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Oven"
    }

    class "_class_Pack" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pack"
    }

    class "_class_Pan" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pan"
    }

    class "_class_Pancake" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pancake"
    }

    class "_class_PancakeMix" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PancakeMix"
    }

    class "_class_PastaBowl" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PastaBowl"
    }

    class "_class_Patient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Patient"
        string rdf:definition = "A role classifying an object that undergoes/is the primary object affected by the event."
    }

    class "_class_PepperShaker" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PepperShaker"
    }

    class "_class_PickingUp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PickingUp"
        string rdf:definition = "A task in which the Agent uses one or more of its grippers to grasp a usually stationary object."
    }

    class "_class_Placing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Placing"
        string rdf:definition = "Distinguished from Positioning in that this task is more about placing an object at a functionally specified location (e.g., place the cup on the table) as opposed to positioning an object at a location defined by coordinates or a region of coordinates (position the cup at xyz)."
    }

    class "_class_Plate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Plate"
    }

    class "_class_Pot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pot"
    }

    class "_class_Pourable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pourable"
        string rdf:definition = "The disposition of a fluid or substance which makes it possible to pour it out of a container and into or onto other objects."
    }

    class "_class_Pouring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pouring"
        string rdf:definition = "A task in which an agent lets liquid substance to flow out of an object. The agent has a kinematic control over the object."
    }

    class "_class_Pulling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pulling"
        string rdf:definition = "A task in which an Agent moves an object in a direction loosely from the object's center of mass towards the contact point between agent and object."
    }

    class "_class_Purification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Purification"
        string rdf:definition = "The disposition of an object (the tool) to change the cleanliness of others."
    }

    class "_class_Pushing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Pushing"
        string rdf:definition = "A task in which an Agent moves an object in a direction loosely from the the contact point between agent and object towards object's center of mass. todo: define subclass 'PushingOver'? Would we expect two distinct contacts with the same surface then?"
    }

    class "_class_Rack" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Rack"
    }

    class "_class_RecipientRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RecipientRole"
        string rdf:definition = "A role which classifies an agent who receives an object modified or created by an action."
    }

    class "_class_Refrigerator" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Refrigerator"
    }

    class "_class_ResourceRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ResourceRole"
        string rdf:definition = """A role classifying objects that are useful or even necessary to sustain the unfolding of an event.

Resources are usually not agentive; a different set of roles classifies the agentive participants in actions. Likewise, typically resources do not play causative or goal roles for the event.

Resources are often consumed by their participation in an event, but this need not always be the case. An instrument and capital are examples of resources that are reusable."""
    }

    class "_class_ResultRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ResultRole"
        string rdf:definition = "A role classifying the object that is the outcome of a creation or modification action or process."
    }

    class "_class_Room" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Room"
        string rdf:definition = "Space that can be occupied or where something can be done."
    }

    class "_class_SaladBowl" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SaladBowl"
    }

    class "_class_SaltShaker" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SaltShaker"
    }

    class "_class_Shaker" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Shaker"
    }

    class "_class_Shaping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Shaping"
        string rdf:definition = "The disposition of an object (the tool) to change the shape of others."
    }

    class "_class_Sink" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sink"
    }

    class "_class_Sitting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sitting"
    }

    class "_class_Slicing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Slicing"
        string rdf:definition = "A particular kind of cutting where the goal is to produce slices from some solid object."
    }

    class "_class_Sofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sofa"
    }

    class "_class_SoupPot" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoupPot"
    }

    class "_class_Spatula" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Spatula"
    }

    class "_class_Spoon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Spoon"
    }

    class "_class_StimulusRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StimulusRole"
        string rdf:definition = "A role classifying an object that is perceived by some agent and thus triggers some reaction (e.g., a perception event)."
    }

    class "_class_Stirring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Stirring"
        string rdf:definition = "A task in which an agent dissolves small particles like sugar or salt in fluid"
    }

    class "_class_Storing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Storing"
    }

    class "_class_Stove" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Stove"
    }

    class "_class_SugarDispenser" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SugarDispenser"
    }

    class "_class_Table" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Table"
    }

    class "_class_TableFork" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TableFork"
    }

    class "_class_TableKnife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TableKnife"
    }

    class "_class_TableSpoon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TableSpoon"
    }

    class "_class_Tableware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tableware"
    }

    class "_class_Tap" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tap"
    }

    class "_class_TeaSpoon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TeaSpoon"
    }

    class "_class_TemperingByCooling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TemperingByCooling"
    }

    class "_class_TemperingByHeating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TemperingByHeating"
    }

    class "_class_Transporting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Transporting"
        string rdf:definition = "A task by which an Agent carries an item from a source to a destination location."
    }

    class "_class_TrashContainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TrashContainer"
    }

    class "_class_Wall" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Wall"
    }

    class "_class_Wardrobe" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Wardrobe"
    }

    class "_class_WaterBottle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "WaterBottle"
    }

    class "_class_WaterGlass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "WaterGlass"
    }

    class "_class_WineBottle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "WineBottle"
    }

    class "_class_WineGlass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "WineGlass"
    }

    class "_class_Affordance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Affordance"
        string rdf:definition = "A relation between an object (the bearer) and others (the triggers) that describes the disposition of the bearer to be involved in an action execution that also involves some trigger object."
    }

    class "_class_Setpoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Setpoint"
        string rdf:definition = "Classifies some dedicated goal region."
    }

    class "_class_Answer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Answer"
        string rdf:definition = "A role that is played by an Information Realization answering some query."
    }

    class "_class_Message" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Message"
        string rdf:definition = """A message is a discrete unit of communication intended by the source for consumption by some recipient or group of recipients (Source: https://en.wikipedia.org/wiki/Message).

Note that the Role Message classifies the Information Realization, not the content."""
    }

    class "_class_ProcessType" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ProcessType"
        string rdf:definition = "An EventType that classifies Processes."
    }

    class "_class_OrderedElement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "OrderedElement"
        string rdf:definition = "A 'Singleton' of an entity that 'is ordered by' some 'Order'. An 'Order item' can only 'precede' or 'follow' another 'Order item', encoding the sortation of the entities contained within the 'Order items'. Different 'Order's need to use different 'Order item's."
    }

    class "_class_MotionProcess" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MotionProcess"
        string rdf:definition = "A class that classifies motion processes. This class is used to represent any process involving motion, encompassing a wide range of activities such as walking, running, jumping, and any other form of physical movement."
    }

    class "_class_Motion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Motion"
        string rdf:definition = "An EventType that classifies motion Processes."
    }

    class "_class_System" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "System"
        string rdf:definition = """A system is a group of interacting or interrelated elements that act according to a set of rules to form a unified whole.

From Wikipedia: https://en.wikipedia.org/wiki/System"""
    }

    class "_class_Binding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Binding"
        string rdf:definition = """A Relation between Roles/Parameters and their fillers that holds in a particular descriptive context, such as a Workflow or Narrative.

It covers two conceptually related, but somewhat ontologically distinct situations:

-- a binding between two Roles, or two Parameters, with the meaning that in the particular descriptive context where the Binding holds, a filler for one Role/Parameter is also a filler for the other
-- a binding between a Role/Parameter and an Entity able to fill that Role/Parameter, with the meaning that in the particular descriptive context where the Binding holds, the Entity fills the Role/Parameter.

Note: in the second case, the Entity filling the Role/Parameter may be a Role or Parameter itself. This however does NOT reduce to the first case. Consider these examples:

-- (first situation) The accountant is also the lawyer. In this case, there are two roles, and there is a person filling both of them. This is a factual, role-role binding.
-- (second situation, linking to a generic Entity) The accountant is Bob. In this case, there is a factual, role-filler binding asserting who fills the accountant role.
-- (second situation, linking to a role) The newly opened job is accountant. In this case, there is a factual, role-filler binding asserting that some role is filled by another, without making any assertion about the filler of this second role. It is not known, and not important, whether an accountant exists at this time.

There is a further, orthogonal distinction made between:
-- factual: the Binding is asserted to hold in the descriptive context
-- counterfactual: the Binding is used to express conditions in the descriptive context. A counterfactual Binding is not meant as an assertion that the Binding actually holds."""
    }

    class "_class_Joint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Joint"
        string rdf:definition = "An object that is used to articulate links in a kinematic structure."
    }

    class "_class_Color" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Color"
        string rdf:definition = "The color of an object. Color regions encode the color value in some space such as RGB or HSV, and may further be used to classify the color as red, dark, etc. The color of an object may have different facets, e.g. a red and blue color."
    }

    class "_class_ExecutionStateRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutionStateRegion"
        string rdf:definition = "A region containing labels that describe different states in the evolution/completion of a task execution."
    }

    class "_class_Feature" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Feature"
        string rdf:definition = "Features are 'parasitic' entities that only exist insofar their host exists. Typical examples are holes, bumps, boundaries, or spots of color."
    }

    class "_class_FrictionAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FrictionAttribute"
        string rdf:definition = "The resistance that one surface or object encounters when moving over another."
    }

    class "_class_StateTransition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StateTransition"
        string rdf:definition = "A transition between two states brought about by the Action of some Agent."
    }

    class "_class_Scene" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Scene"
        string rdf:definition = "Scenes are Situations which interpret a State in terms of its conformance to some qualitative, image schematic description. I.e., the scene is described in terms of qualitative functional and spatial relations existing between participating objects."
    }

    class "_class_SituationTransition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SituationTransition"
        string rdf:definition = "A transition between two situations, usually brought about by the Action of some Agent."
    }

    class "_class_NonmanifestedSituation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "NonmanifestedSituation"
        string rdf:definition = """A Situation which does not manifest in any event.

The main use case for this is to represent expectations that are not met, e.g. unfulfilled post-conditions of an action. An action with unmet postconditions is then a failure.

Because of open world semantics of DL, the default assumption for a Situation individual with no \"manifests in\" relations is simply that we don't know yet whether that Situation is manifested and if so by what Event.

As such, an explicit assertion is needed to make a Situation a nonmanifested one: either declare that individual's type NonmanifestedSituation, or assert that it has 0 manifestsIn relations."""
    }

    class "_class_JointLimit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "JointLimit"
        string rdf:definition = "The physical limits of a joint."
    }

    class "_class_JointState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "JointState"
        string rdf:definition = "The state of a joint in terms of position, velocity of the joint and effort applied to it."
    }

    class "_class_Localization" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Localization"
        string rdf:definition = "The localization of an object. The region of this quality encodes values to localize the object in a dimensional space, e.g. Euclidean positions that localize the object in Euclidean space."
    }

    class "_class_MassAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MassAttribute"
        string rdf:definition = "The quantity of matter which a body contains, as measured by its acceleration under given force or by the force exerted on it by a gravitational field."
    }

    class "_class_NetForce" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "NetForce"
        string rdf:definition = "The accumulated force acting upon an object."
    }

    class "_class_State" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "State"
        string rdf:definition = """States are stative and homeomeric events.

For stative events, the mereological sum of two instances has the same type as both instances. This is, for example, the state of sitting on a chair, or the process of a pendulum swinging around.

The difference between states and processes is that states are, in addition, homeomeric, and processes are not.  This means that, when considering time slices  of an event, for states, these time slices always have the same type as the state, but for processes this is not the case."""
    }

    class "_class_Succedence" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Succedence"
        string rdf:definition = """A relation that holds in some descriptive context such as a Workflow, between two TaskInvocations belonging to that same Workflow. It means that one task invocation should follow the other.

Note: a successor relation implemented as an OWL object property is sometimes enough, but not in general; in particular, when there are conditions imposed on the succession.

As a result, a reification pattern was applied here."""
    }

    class "_class_Preference" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Preference"
        string rdf:definition = """A 'Preference' is a 'Quality' of an 'Agent' that orders 'Situation's by some heuristic based on the happiness, satisfaction, gratification, morality, enjoyment, and utility (see alse https://en.wikipedia.org/wiki/Preference) they provide to their bearing Agent.

The pattern is as follows: A 'Preference' 'is described by' a 'Predilection', which also 'describes' an 'Order' that 'orders' 'Order item's that contain only 'Situation's. The 'Situation's then are modeled according to what the preference entails.

That a 'Preference' orders 'Situation's might be unintuitive, but makes the model very general. A few examples:

Example 1

\"Peter likes coffee and dislikes tea\".
Here, between different hypothetical situations where he plays the role of a performer in a drinking task, Peter prefers the situations in which role of the drunken object is played by some coffee (vs. some tea). Note that the coffe and tea are hypothetical objects as well and could, for example, be represented via reified Concepts.

Example 2

\"Would you like this pot of coffee, or this pot of tea, Peter?\"
Here, as opposed to Example 1, the pot of coffee and the pot of tea are not hypothetical, but concrete.

Example 3

\"Would you like this pot of coffee, or should I brew you some tea?\"
Here, the pot of coffee is concrete and the tea is not.

Example 4

Situations are not restricted to Tasks; other event types are possible as well.
For example, Peter might prefer the Containment State of a tiger being inside a cage vs. the Containment State of the tiger being outside of the cage."""
    }

    class "_class_Shape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Shape"
        string rdf:definition = "The external form, contours, or outline of an object."
    }

    class "_class_ShapeRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ShapeRegion"
        string rdf:definition = """Encodes the shape of an object.

Note that sometimes the shape as actually used for some purpose may be displaced. This is the case, e.g., for robot links which use a mesh file to describe their shape, but the reference pose of the link uses the mesh translated/rotated in the link's local coordinate frame."""
    }

    class "_class_SoftwareInstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoftwareInstance"
        string rdf:definition = """A Software instance is an entity to represent the agent that emerges from and while executing software: Some object, that can perform actions and communicate via some interfaces.
In this view, we see the of an Agent required intentionality its intentionality as bestowed upon the Software instance from the agents who started the program or gave an input (e.g., via a mouse click) to achieve some goal.

Another apporach might be to not model this entity at all and only see Execution of Software as a Process (see, e.g., https://en.wikipedia.org/wiki/Execution_(computing)). However, this would complicate modeling communication between running Software processes."""
    }

    class "_class_StateType" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StateType"
        string rdf:definition = "An EventType that classifies States."
    }

    class "_class_PhysicalEffector" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalEffector"
        string rdf:definition = "A functional part belonging to an Agent and which allows that Agent to act upon its surroundings."
    }

    class "_class_QueryingTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QueryingTask"
        string rdf:definition = "An Illocutionary act where the Sender of the Message does so to trigger the Receiver to return some information that is specified within the content of the Message."
    }

    class "_class_MotionDescription" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MotionDescription"
        string rdf:definition = "A Description of a Motion process, e.g. moving the arm into a specific location"
    }

    class "_class_Order" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Order"
        string rdf:definition = "An 'Order' sorts two or more 'Order item's via the relations 'precedes' and 'follows'."
    }

    class "_class_Transient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Transient"
        string rdf:definition = """Objects may undergo changes during Processes; however, while the change Process is in operation, one cannot strictly say either the input of the Process still exists, nor that the result exists yet.

A prototypical example is making a pancake on a heater. When PancakeMix is put on the hot plate, it ceases to be PancakeMix-- already, the chemical structure of the substance gets altered-- however it is only after sufficient heating that this object becomes a Pancake.

Transients are the objects undergoing such change processes; they are no longer the initial objects fed into the process, nor are they the objects produced as results.

Instead, a Transient transitionsFrom some initial Object that was fed into a change Process. Typically, a Transient may transitionTo some resulting Object (though not always, some processes simply destroy objects).

It is also possible that a Transient transitionsBack to the initial object. An example is the catalyst in a chemical reaction; another example is a loaf of bread after a slice has been cut off."""
    }

    class "_class_ColorRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ColorRegion"
        string rdf:definition = "Encodes the color of an object."
    }

    class "_class_ForceAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ForceAttribute"
        string rdf:definition = "The value of a force dynamical characteristic. An example is the force exerted on another object when pushing it."
    }

    class "_class_API_Specification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "API_Specification"
        string rdf:definition = """An application programming interface (API) is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use an API is called an API specification.

Source: https://en.wikipedia.org/wiki/API"""
    }

    class "_class_InterfaceSpecification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InterfaceSpecification"
        string rdf:definition = """The Specification of an Interface between software, computer hardware, peripheral devices, humans and combinations of these.

Source: https://en.wikipedia.org/wiki/Interface_(computing)"""
    }

    class "_class_AbductiveReasoning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AbductiveReasoning"
        string rdf:definition = "A task in which the Agent proceeds from some set of statements about a world, and attempts to obtain an explanation for these statements. This explanation is often an inferred cause, such as a final cause or intention. Further, it is often required that there be some guarantees that the explanation produced by AbductiveReasoning have some desirable property, such as being the simplest or most likely given the set of statements to explain."
    }

    class "_class_Reasoning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Reasoning"
        string rdf:definition = "A Mental task in which an Agent endeavours to obtain new knowledge from knowledge it already possesses."
    }

    class "_class_Accessor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Accessor"
        string rdf:definition = "A role classifying an object used to gain access to some other entity."
    }

    class "_class_Accident" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Accident"
        string rdf:definition = """An Event for which causes are unknown and/or considered irrelevant. This is true also for \"final causes\" (that is, intentions) of Agents participating in the Accident: it is not the intentions of these Agents to bring about the Accident.

Note a distinction between this definition and some informal, everyday uses of \"accident\" which require a causal structure and responsibility to be ascertained. An accident, in the informal sense, may require an explanation as to who made a mistake in bringing about the event; a \"traffic accident\", where we want to know who's responsible, is an example of this.

Such an event does NOT fall under the definition of Accident here. An example of Accident would be a fair coin landing Heads: the causal chain for why this exact face landed is not important, all that matters is the brute fact that the coin landed Heads."""
    }

    class "_class_ActionExecutionPlan" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ActionExecutionPlan"
        string rdf:definition = "idea: steps in workflows assert that they are defined by action execution plans."
    }

    class "_class_Status" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Status"
        string rdf:definition = "A role that can be played by some parameter which indicates the state of affairs of some entity, e.g. a flag describing the outcome of an action in terms of success or failure, or an indicator of whether a device is turned on or off."
    }

    class "_class_Actuating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Actuating"
        string rdf:definition = """Tasks where the goal is to move an object.

Usually, an agent will use their prehensile effectors, ie. hands, for this purpose, so there is a lot of conceptual overlap between Actuating and Manipulating.

However, these categories are nonetheless distinguished in that there are more ways to actuate objects than simply manipulating them; for example, some tool like a net or frying pan might be used to catch an object.

Another way to look at the difference between Actuating and Manipulating is in what they \"profile\", ie. focus on as important.

For Actuating, it is the object's motion that is paramount.

For Manipulating, it is the movement of the hand(s) and the change in functional relationships (such as kinematic control) between the hand(s) and the manipulated object(s)."""
    }

    class "_class_PhysicalTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalTask"
        string rdf:definition = "A task in which a PhysicalAgent affects some physical object."
    }

    class "_class_AestheticDesign" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AestheticDesign"
        string rdf:definition = """A design that describes an aesthetic quality of an object.

Aesthetics is the philosophical study of beauty and taste. The term stems from the Greek word 'aisthetikos', meaning 'of sense perception', and is related to the study of sensory values. From design point of view, aesthetics refers to the visual attractiveness of an object. Visual aesthetics have these key elements: Color, Shape, Pattern, Line, Texture, Visual weight, Balance, Scale, Proximity and Movement."""
    }

    class "_class_Agonist" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Agonist"
        string rdf:definition = "A role that classifies entities with a tendency to either cause an alteration or to preserve some state."
    }

    class "_class_Algorithm" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Algorithm"
        string rdf:definition = """An Algorithm is a finite sequence of well-defined instructions, typically used to solve a class of specific problems or to perform a computation.

From Wikipedia: https://en.wikipedia.org/wiki/Algorithm"""
    }

    class "_class_Alteration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Alteration"
        string rdf:definition = "A process by which an aspect of some object changes such as ice cream melting in the sun."
    }

    class "_class_AlterativeInteraction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AlterativeInteraction"
        string rdf:definition = "A force interaction where the agonist has the tendency to set another object into motion. An example is 'opening a door' where some object interacts with the door such that it moves out of its frame."
    }

    class "_class_ForceInteraction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ForceInteraction"
        string rdf:definition = 'Classifies events in which two entities interact with each other with a reference to force. One of the entities, the agonist, has a tendency to either set the other entity (the antagonist) into motion, or to keep it still under the influence of some other force. The tendency only manifests in case the agonist is the "stronger entity".'
    }

    class "_class_PreservativeInteraction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PreservativeInteraction"
        string rdf:definition = "A force interaction where the agonist has a tendency to keep another object still. An example is 'holding a door closed' where some object interacts with the door to neutralize forces that could set the door into motion."
    }

    class "_class_AlteredObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AlteredObject"
        string rdf:definition = "An object undergoing modifications."
    }

    class "_class_Amateurish" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Amateurish"
        string rdf:definition = "A description of amateurish behavior."
    }

    class "_class_DexterityDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DexterityDiagnosis"
        string rdf:definition = "A description of the dexterity of a system, possibly in comparison to another system."
    }

    class "_class_Masterful" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Masterful"
        string rdf:definition = "A description of masterful behavior."
    }

    class "_class_AnsweringTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AnsweringTask"
        string rdf:definition = "An Illocutionary act where the Sender emits some Message to the Receiver as a reaction to some previous Communication task where the Roles where switched, i.e., the Sender (Receiver) of the Answering task has been the Sender (Sender) for the cause."
    }

    class "_class_CommandingTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommandingTask"
        string rdf:definition = "An Illocutionary act where the Sender emits some Message with the intent to cause the Receiver to perform some action."
    }

    class "_class_IllocutionaryTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "IllocutionaryTask"
        string rdf:definition = '''A task which is executed by a Locution action: A Locution is what was said and meant, Illocution is what was done.

When somebody says "Is there any salt?" at the dinner table, the illocutionary act is a request: "please give me some salt" even though the locutionary act (the literal sentence) was to ask a question about the presence of salt.

Source: https://en.wikipedia.org/wiki/Illocutionary_act'''
    }

    class "_class_Antagonist" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Antagonist"
        string rdf:definition = "A role that classifies entities that are opposed to the tendency of some agonist."
    }

    class "_class_Approaching" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Approaching"
        string rdf:definition = "A process type to classify motions by which a body approaches some object or location."
    }

    class "_class_Locomotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Locomotion"
        string rdf:definition = """Conceptually related to Navigation, but distinguishable from it because of the profile, ie. the focus of the task.

Navigation is about reaching some goal.

Locomotion is concerned more with the actual motion."""
    }

    class "_class_ArchiveFile" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ArchiveFile"
        string rdf:definition = """An archive file is a computer file that is composed of one or more files along with metadata.

Source: https://en.wikipedia.org/wiki/Archive_file"""
    }

    class "_class_ArchiveText" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ArchiveText"
        string rdf:definition = """An Archive is a Structured Text that is composed of one or more Structured Texts along with metadata. Archives are used to collect multiple texts together into a single text for easier portability and storage as Archive Files, or simply to compress text to use less storage space as Computer Files. Archive often store directory structures, error detection and correction information, arbitrary comments, and sometimes use built-in encryption.

Source: https://en.wikipedia.org/wiki/Archive_file"""
    }

    class "_class_Digital_File" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Digital_File"
        string rdf:definition = "Any file that exists as a digital resource (but not its content), e.g., a text file actually laying on some hard drive, but not the contained text."
    }

    class "_class_ArchiveFormat" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ArchiveFormat"
        string rdf:definition = """An Archive Format is the file format of an archive file.

Source: https://en.wikipedia.org/wiki/Archive_file#Archive_formats"""
    }

    class "_class_File_format" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "File_format"
        string rdf:definition = """A File Format is a standard way that information is encoded for storage in a computer file. It specifies how bits are used to encode information in a digital storage medium.

From Wikipedia: https://en.wikipedia.org/wiki/File_format"""
    }

    class "_class_FileConfiguration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FileConfiguration"
        string rdf:definition = "A configuration whose members are all files. Used to model, e.g., concrete collections of zip- and jar-files (and so on)."
    }

    class "_class_Structured_Text" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Structured_Text"
        string rdf:definition = "Any Text that adheres to some rules that are in any way more specific than natural language and that cannot be made sense of without knowing said rules."
    }

    class "_class_AreaSurveying" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AreaSurveying"
        string rdf:definition = "A task in which an Agent uses its perception apparatus to gain information about some location."
    }

    class "_class_Perceiving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Perceiving"
        string rdf:definition = "A task in which the Agent gathers and interprets sensor information about its surroundings."
    }

    class "_class_Arm" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Arm"
        string rdf:definition = "A limb used to reach for objects."
    }

    class "_class_Limb" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Limb"
        string rdf:definition = "An arm or leg of an embodied agent."
    }

    class "_class_ArtificialAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ArtificialAgent"
        string rdf:definition = """A physical object with artificial characteristics, which can perform actions to achieve desired goals, and typically has sensors and/or actuators.

There can be non-physical artificial agents such as software programs but they are not considered here in the scope of artificial agent."""
    }

    class "_class_AssertionTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AssertionTask"
        string rdf:definition = "An Illocutionary Act where the Sender emits some Message with the intent to change what the Receiver believes to be true in some context. Often, assertions are of facts about the real world, but this need not be the case. Assertions can communicate what someone believes, or refer to a world that is entirely fictional. In all these cases however, assertions are intended to update the listener's model (of the real world, or of the speaker's beliefs, or of the fictional world etc.)."
    }

    class "_class_DeclarativeClause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeclarativeClause"
        string rdf:definition = "A clause which makes an assertion or declaration."
    }

    class "_class_AssumingArmPose" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AssumingArmPose"
        string rdf:definition = "A task by which an Agent arranges one/some/all of its arms according to some configuration."
    }

    class "_class_AssumingPose" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AssumingPose"
        string rdf:definition = "A task by which an Agent arranges its body, or part of it, according to some configuration."
    }

    class "_class_AttentionShift" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AttentionShift"
        string rdf:definition = "A mental task in which the executing Agent shifts his attention from some Information to another."
    }

    class "_class_MentalTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MentalTask"
        string rdf:definition = "A Task classifying some MentalAction, that is, an Action through which an Agent manipulates representations stored in its own cognition."
    }

    class "_class_AvoidedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "AvoidedObject"
        string rdf:definition = "An object that is avoided."
    }

    class "_class_Avoiding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Avoiding"
        string rdf:definition = "A task in which an Agent moves so as to not enter or pass through a location."
    }

    class "_class_Navigating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Navigating"
        string rdf:definition = "A task in which an Agent moves through space so as to arrive at some location, follow some path, or increase its distance from some location or other entity. Often, navigation involves finding paths around obstacles and forbidden areas."
    }

    class "_class_Barrier" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Barrier"
        string rdf:definition = "A role classifying an object used to prevent others from entering or leaving a restricted space or group."
    }

    class "_class_Restrictor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Restrictor"
        string rdf:definition = "A role classifying an object used to deny access to some other entity."
    }

    class "_class_BehavioralDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BehavioralDiagnosis"
        string rdf:definition = "A diagnosis of how a system interacts with its world."
    }

    class "_class_GoalRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GoalRole"
        string rdf:definition = "A role classifying objects that constitute the goal of an action."
    }

    class "_class_CounterfactualBinding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CounterfactualBinding"
        string rdf:definition = """CounterfactualBindings are used to express conditions:

-- that two roles share a filler (RoleRoleBindings);
-- that the filler of a role is a particular entity (RoleFillerBindings). This is typically the case when the filler of the role may be one of a few constants, as is the case with the execution status of a robot task.

TODO: for the robot workflows we are likely to need at the start, testing equality of fillers is enough. In the future, we may want to replace that with unifiability of fillers."""
    }

    class "_class_FactualBinding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FactualBinding"
        string rdf:definition = """FactualBindings are used in a workflow to assert that:

-- task- or workflow-defined roles share fillers (RoleRoleBindings). Example, the instrument of a cutting task may be the actee of a grasping task;
-- task- or workflow-defined roles are filled by a particular entity (RoleFillerBindings). This is typically the case when roles, and especially parameters, can be assigned to constants. Example, the waiting time to cook soft eggs is 3 minutes."""
    }

    class "_class_RoleFillerBinding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RoleFillerBinding"
        string rdf:definition = "A binding that connects a role to a particular filler."
    }

    class "_class_RoleRoleBinding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RoleRoleBinding"
        string rdf:definition = "A binding that asserts that two roles have the same filler."
    }

    class "_class_Blockage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Blockage"
        string rdf:definition = "The disposition of an object (the barrier) to prevent others from accessing, leaving, or seeing a restricted space, or group."
    }

    class "_class_BlockedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BlockedObject"
        string rdf:definition = "An object that is blocked from accessing something."
    }

    class "_class_BodyMovement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BodyMovement"
        string rdf:definition = """Motion described in terms of how parts of an Agent's body move.

As such, this concept can be applied only to motions involving some PhysicalAgent, or body parts of a PhysicalAgent."""
    }

    class "_class_Boiling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Boiling"
        string rdf:definition = "In each instance of this collection some liquid matter is raised to its boilingPoint and is thereby changed from being in the Liquid-StateOfMatter to being in the Gaseous-StateOfMatter."
    }

    class "_class_Vaporizing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Vaporizing"
        string rdf:definition = "Some material transitions from a liquid to a gaseous phase."
    }

    class "_class_BoxShape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "BoxShape"
        string rdf:definition = "A symmetrical shape, either solid or hollow, contained by six rectangles."
    }

    class "_class_Variability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Variability"
        string rdf:definition = "The disposition of an object (the tool) to change some aspect of others."
    }

    class "_class_Cutter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cutter"
        string rdf:definition = "A role to classify an object used to cut other objects. Usually should poses sharpness as a quality. Execptions are not considered in this context. Such as a wind, water, or other natural agents cutting(eroding) the rocks."
    }

    class "_class_CutObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CutObject"
        string rdf:definition = "An object being cut down into pieces."
    }

    class "_class_Capability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Capability"
        string rdf:definition = "Capability"
    }

    class "_class_Capacity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Capacity"
        string rdf:definition = "The maximum amount an object can contain."
    }

    class "_class_Intrinsic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Intrinsic"
        string rdf:definition = "A physical quality that is independent of context."
    }

    class "_class_Catching" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Catching"
        string rdf:definition = "A task by which an Agent stops a moving object and gains kinematic control over it, usually by grasping."
    }

    class "_class_CausalEventRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CausalEventRole"
        string rdf:definition = '''A role filled by a description of some action or process that brings about a motion.

As an example, consider the utterance "the tennisman served the ball by hitting it with the racket." In this utterance, the filler of the CausalEventRole is expressed by the "by hitting it with the racket" constituent.'''
    }

    class "_class_CausedMotionTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CausedMotionTheory"
        string rdf:definition = '''A schematic theory describing a situation in which an agent performs an action which causes an object to move along a certain path. A popular example being "He sneezed the napkin off the table." (Goldberg 1995)

Let xA, xP be objects filling the agent, patient roles of this schema. Then one can infer that xA movesObject xP.'''
    }

    class "_class_ImageSchemaTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ImageSchemaTheory"
        string rdf:definition = """A theory that describes an image-schematic relationship between some entities.

Image schemas are considered as fundamental, pre-conceptual, building blocks of cognition. They were introduced to characterize how human beings are believed to organize and make sense of experience.

For SOMA, whereas the focus of executable schematic theories is to describe how an agent might act, image schematic theories focus on descriptions of how objects behave in the absence of, or after, an active intervention from an agent."""
    }

    class "_class_PerformerRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PerformerRole"
        string rdf:definition = """A role classifying an Agent responsible for performing an Action.

The entity playing an PerformerRole is endowed with sentience and the capacity to deliberately choose actions in pursuit of goals. This distinguishes Agents from other causes that could bring an event about."""
    }

    class "_class_SourcePathGoalTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SourcePathGoalTheory"
        string rdf:definition = """A very general image-schema of the Path family, this schema describes movement along a path from a source towards a goal.

Note: in cognitive linguistics literature, the roles of this schema are Source, Path, Goal. However, to avoid overloading some other terminology in SOMA, we renamed Source to Origin and Goal to Destination.

As yet, this schema is not associated to any object property."""
    }

    class "_class_Channel" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Channel"
        string rdf:definition = "A Channel in a Communication Task is the path of travel by a Message, e.g., via WLAN, air (in the case of a Message classifying soundwaves) or a telephone cable."
    }

    class "_class_PathRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PathRole"
        string rdf:definition = "A role that classifies the path of a motion."
    }

    class "_class_CommunicationTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommunicationTask"
        string rdf:definition = """A Task in which two or more Agents exchange information. A CommunicationTask classifies only Events that have only Agents and Social objects as participants.

Of course, the means of exchange is Physical, however this concept is to classify events for which we are not interested in the physical substrate, but rather who communicated and what the information content was."""
    }

    class "_class_CheckingObjectPresence" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CheckingObjectPresence"
        string rdf:definition = "A task by which an Agent uses its sensors to check for the presence of a specific object and to obtain some other information about it, e.g. pose."
    }

    class "_class_ChemicalProcess" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ChemicalProcess"
        string rdf:definition = """A process by which the chemical constituency of an Entity or set of Entities changes.

In some sense any process that results in entities being created or destroyed might trivially fit here, however this concept is intended specifically for Events where the occuring chemical reactions are of importance."""
    }

    class "_class_Choice" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Choice"
        string rdf:definition = "The output of a, e.g, Selecting Task."
    }

    class "_class_CircularCylinder" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CircularCylinder"
        string rdf:definition = "A cylinder figure with circular cross section."
    }

    class "_class_CylinderShape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CylinderShape"
        string rdf:definition = "A solid geometrical figure with straight parallel sides and a circular or oval cross section."
    }

    class "_class_Classifier" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Classifier"
    }

    class "_class_StatisticalReasoner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StatisticalReasoner"
    }

    class "_class_ClausalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ClausalObject"
        string rdf:definition = "A clause is a phrase containing a subject and a predicate."
    }

    class "_class_Phrase" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Phrase"
    }

    class "_class_Clean" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Clean"
        string rdf:definition = "A cleanliness region with values considered as clean."
    }

    class "_class_CleanlinessRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CleanlinessRegion"
        string rdf:definition = "Encodes the cleanliness of an object."
    }

    class "_class_ModifyingPhysicalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ModifyingPhysicalObject"
        string rdf:definition = "Superconcept for tasks that involve affecting some state that an object is in (e.g. where it is located), without creating or destroying the object."
    }

    class "_class_Cleanliness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cleanliness"
        string rdf:definition = "The quality of being clean."
    }

    class "_class_SocialQuality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SocialQuality"
        string rdf:definition = "Any aspect of an entity that specifies social characteristics."
    }

    class "_class_ClientServer_Specification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Client-Server_Specification"
        string rdf:definition = """An API Secification that describes the well known Client-Server pattern:

The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"""
    }

    class "_class_ClientRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ClientRole"
        string rdf:definition = """The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"""
    }

    class "_class_ServerRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ServerRole"
        string rdf:definition = """The Client-server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs, which share their resources with clients. A client usually does not share any of its resources, but it requests content or service from a server. Clients, therefore, initiate communication sessions with servers, which await incoming requests. Examples of computer applications that use the client-server model are email, network printing, and the World Wide Web.

Source: https://en.wikipedia.org/wiki/Client%E2%80%93server_model"""
    }

    class "_class_InterfaceComponentRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InterfaceComponentRole"
    }

    class "_class_Squeezing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Squeezing"
        string rdf:definition = "A task in which an Agent applies pressure to an object they have in their grasp."
    }

    class "_class_Clumsiness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Clumsiness"
        string rdf:definition = "A description of clumsy behavior."
    }

    class "_class_CognitiveAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CognitiveAgent"
        string rdf:definition = "An agent that is capable to act on its own, in contrast to sub-cognitive Agents, that need to have their intentionality bestowed upon some other agent."
    }

    class "_class_SubCognitiveAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SubCognitiveAgent"
        string rdf:definition = "An agent that is not capable to act on its own, i.e., that is reactive. Its intentionality needs to be bestowed upon from some other agent, that it acts for."
    }

    class "_class_Collision" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Collision"
        string rdf:definition = "A contact event of objects bumping into each other such that their movement is affected."
    }

    class "_class_Extrinsic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Extrinsic"
        string rdf:definition = "A physical quality that depends on relationships to other objects, such as the color of an object which depends on light conditions in the environment."
    }

    class "_class_ImperativeClause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ImperativeClause"
        string rdf:definition = "A clause which commands some agent to perform a task or bring about a state of affairs."
    }

    class "_class_CommitedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommitedObject"
        string rdf:definition = "An object committed to a bigger whole. After being committed, the object does not exist anymore in its old form."
    }

    class "_class_ConnectedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ConnectedObject"
        string rdf:definition = "An object that is combined with another object."
    }

    class "_class_CommunicationAction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommunicationAction"
        string rdf:definition = "An action in which an Agent uses some actuator for communication purposes."
    }

    class "_class_LinguisticObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LinguisticObject"
    }

    class "_class_CommunicationReport" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CommunicationReport"
        string rdf:definition = "A task in which an Agent endeavors to describe truthfully some state of affairs."
    }

    class "_class_Receiver" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Receiver"
        string rdf:definition = "The role played by an Agent in a Communication Task that perceives and interpretes some incoming Message."
    }

    class "_class_Sender" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sender"
        string rdf:definition = "The Role played by an Agent in a Communication Task that emits some Information Realization with the purpose of percipience by some Receiver."
    }

    class "_class_Composing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Composing"
        string rdf:definition = "The disposition of an object (the tool) to change the compositional structure of others."
    }

    class "_class_Computer_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Computer_Language"
        string rdf:definition = """A computer language is a formal language used in communication with a computer.

From Wikipedia: https://en.wikipedia.org/wiki/Computer_language"""
    }

    class "_class_FormalLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FormalLanguage"
        string rdf:definition = """A Formal Language consists of words whose letters are taken from an alphabet and are well-formed according to a specific set of rules.

From Wikipedia: https://en.wikipedia.org/wiki/Formal_language"""
    }

    class "_class_Computer_Program" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Computer_Program"
        string rdf:definition = "The Program itself (the specific set of instruction in a Programming Language), not the file that it is contained in nor the implemented algorithm!"
    }

    class "_class_Programming_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Programming_Language"
        string rdf:definition = "Any Programming Language, including both human-readable like Java and non-human-readable languages like binary machine code."
    }

    class "_class_Conclusion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Conclusion"
        string rdf:definition = "An object that is derived from some premise using some inference rules."
    }

    class "_class_CreatedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CreatedObject"
        string rdf:definition = "An object that is created."
    }

    class "_class_Knowledge" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Knowledge"
    }

    class "_class_ConditionalSuccedence" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ConditionalSuccedence"
        string rdf:definition = """A relation that holds between two OGPTasks that belong to the same OGPWorkflow, and which means that, if a condition is met, the successor task invocation is to be executed after the predecessor task invocation completes.

The condition is a conjunction of CounterfactualBindings. These bindings may be RoleRoleBindings (meaning, test whether the fillers for these Roles/Parameters are the same) or RoleFillerBindings (meaning, test whether the filler of the Role unifies with the candidate Entity).

An empty conjunction of CounterfactualBindings is assumed to be True."""
    }

    class "_class_Configuration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Configuration"
        string rdf:definition = """A description of a State. This includes e.g. what acceptable regions for participant objects of the State might look like.
A configuration of the world is construed to be stable on its own. Outside disturbances may cause state transitions, and the settling into some other, self-stable configuration.

Several other Description subclasses may function as Configurations. For example, a Goal is a description of a desired State. A Norm describes a State that should be maintained. A Diagnosis describes a State that causes certain symptoms etc.

Note a couple of issues here. First one relates to what \"configuration\" means; in particular, this doesn't mean a configuration that is unchanging according to any viewpoint. The analogy here is the \"macrostate\" from thermodynamics: a macrostate with two gases mixed does not mean all gas particles are motionless, but rather that the locations and movements of gas particles are such that any particle is likely to have as many neighbors of one type as the other.

The second issue relates to what is \"outside\". The state is a configuration of some, but not necessarily all, Entities in the world. Entities not in this configuration are outside of it."""
    }

    class "_class_ContactState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ContactState"
        string rdf:definition = "Classifies States in which some objects are in contact."
    }

    class "_class_Container" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Container"
        string rdf:definition = "A role classifying an object used to contain others."
    }

    class "_class_IncludedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "IncludedObject"
        string rdf:definition = "An object that is contained in something. This is meant very general and includes, e.g., elements contained in a set, or things that are spatially contained within the boundaries of some object."
    }

    class "_class_ContainmentState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ContainmentState"
        string rdf:definition = "Classifies States in which an object is kept inside another object."
    }

    class "_class_FunctionalControl" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalControl"
        string rdf:definition = """Classifies States in which an object restricts the movement of another, at least partially. Usually neither object is construed to be an agent.

Note that this State focuses on how the interaction of, usually non-agentive, objects restricts their motion. This is in contrast to Blockage/Accessibility states where the placement of some objects influences the access to some of them by a third, usually agentive party."""
    }

    class "_class_ContainmentTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ContainmentTheory"
        string rdf:definition = """A schematic theory that describes a functional relation which ensures that the location of some entity, the locatum, is constrained to be within some region which is the interior of some other entity, the relatum.

This is also known as FunctionalControlInternal in GUM-4-space (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL isInsideOf xR."""
    }

    class "_class_ControlTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ControlTheory"
        string rdf:definition = """A description of functional-spatial configurations where one object controls another object's position in space, e.g. if a pot moves, then the popcorn contained therein moves, as well. Note that the objects do not need to be in direct contact.

Adopted from GUM-4-space (Bateman et al. 2010)."""
    }

    class "_class_ContinuousJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ContinuousJoint"
        string rdf:definition = "A continuous hinge joint that rotates around an axis and has no upper and lower limits."
    }

    class "_class_HingeJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HingeJoint"
        string rdf:definition = "A joint that rotates along an axis."
    }

    class "_class_FunctionalSpatialSchemaTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalSpatialSchemaTheory"
        string rdf:definition = """The superclass for theories describing functional spatial relations.

Adopted from GUM-4-space (Bateman et al. 2010)."""
    }

    class "_class_Cover" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Cover"
        string rdf:definition = "An object used to cover up others, such as a lid used as a cover for a pot."
    }

    class "_class_Coverage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Coverage"
        string rdf:definition = "The disposition of an object (the cover) to hide or to protect objects by covering them. An example is a door that covers items in a container to e.g. prevent dust getting inside of the container."
    }

    class "_class_CoveredObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoveredObject"
        string rdf:definition = "An object that is covered."
    }

    class "_class_CoverageTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoverageTheory"
        string rdf:definition = """A schematic theory of a functional relation between two objects such that one of them, the locatum, blocks access to the interior of the relatum.

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL coversObject xR."""
    }

    class "_class_CoveringTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CoveringTheory"
        string rdf:definition = "A schematic theory of how an agent can use an instrument to prevent access to the interior of a patient."
    }

    class "_class_ExecutableSchematicTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutableSchematicTheory"
        string rdf:definition = """Also known as \"executing schemas\" or \"x-schemas\", these were defined by Bergen and Chang in their work \"Embodied Construction Grammar in Simulation-Based Language Understanding\" as:

\"Executing schemas, or x-schemas, are dynamic representations motivated in part by motor and perceptual systems (Bailey 1997; Narayanan 1997), on the assumption that the same underlying representations used for executing and perceiving an action are brought to bear in understanding language about that action. The x-schema formalism is an extension of Petri nets (Murata 1989) that can model sequential, concurrent, and
asynchronous events\"

SOMA does not restrict the formalism of ExecutableSchematicTheories; i.e. they don't have to be Petri Nets.

They maintain their role however as representations able to drive a simulation, at some level of abstraction, of an embodied action. This level of abstraction may be still fairly underspecified as in the case of the original x-schemas and as such not a plan that an agent could run in an actual physical environment without further information."""
    }

    class "_class_CrackingTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "CrackingTheory"
        string rdf:definition = "A schematic theory of how an agent can inflict damage to the surface of an object."
    }

    class "_class_Creation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Creation"
        string rdf:definition = """A process by which an Entity is created in the physical world.

Note, most of the physical Entities we will be considering here are in fact arrangements of many other, smaller physical Entities. Therefore another way to look at this is, a 'Physical creation' is the process by which a set of physical Entities is arranged in a certain way, and the arrangement is then itself considered a physical Entity."""
    }

    class "_class_Tool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tool"
        string rdf:definition = "A role to classify an object used to modify or actuate others."
    }

    class "_class_Database" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Database"
        string rdf:definition = """A Database is a Software that organizes a collection of data stored and and allows for access, usually via some query engine.

Source: https://en.wikipedia.org/wiki/Database"""
    }

    class "_class_SoftwareRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoftwareRole"
        string rdf:definition = "A Software Role is a Role applying to only Software and encoding the purpose of the Software: Its Role within Interface Patterns (e.g. Client vs. Server), its functionality (e.g. Database vs. Comnputer Game), and so on."
    }

    class "_class_Deciding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Deciding"
    }

    class "_class_DerivingInformation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DerivingInformation"
    }

    class "_class_DeductiveReasoning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeductiveReasoning"
        string rdf:definition = '''A task in which the Agent, using general logical principles that it considers logically valid, applied to premises that it considers logically true, arrives at conclusions that it considers logically certain.

Deduction is often explained as starting from the "general" (some property X is known about all members of a set S), applying it to the "specific" (some Entity Y is known to belong to set S), to arrive at a specialization of the general property (X applies to Y).'''
    }

    class "_class_Deformation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Deformation"
        string rdf:definition = """A process by which a physical Entity changes its shape under the influence of some factors outside of the Entity.

Note, changes of shape may be self-caused; for example, a gas will naturally disperse. This however would be a different type of process (Dispersion).

A soft slab of clay deforming under its own weight on Earth would still count as deformation: it is the gravity of the Earth (so, a factor outside the slab of clay) which makes the slab change shape."""
    }

    class "_class_ShapedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ShapedObject"
        string rdf:definition = "An object undergoing shape change."
    }

    class "_class_FluidFlow" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FluidFlow"
        string rdf:definition = """A process by which a fluid moves or is moved from a location to another, but such that it maintains its constitution. A fluid is an Entity made of many smaller Entities, loosely bound to each other.

An issue to highlight here is the maintenance of constitution. Fluids-- gases in particular-- are prone to disperse. Such a process is not flow however, because the loose bounds between the constituents become even looser, to the point of the original Entity becoming entirely discombobulated. """
    }

    class "_class_Shifting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Shifting"
        string rdf:definition = "The disposition of an object (the tool) to change the localization of others."
    }

    class "_class_DependentPlace" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DependentPlace"
        string rdf:definition = "A feature that is not part of its host, like a hole in a piece of cheese."
    }

    class "_class_Deposit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Deposit"
        string rdf:definition = "A role classifying an object ontop which others are put to e.g. store them, or to place them in a meaningful way for future activities."
    }

    class "_class_DepositedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DepositedObject"
        string rdf:definition = "An object placed ontop of another one."
    }

    class "_class_Deposition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Deposition"
        string rdf:definition = "The disposition to support objects."
    }

    class "_class_InformationAcquisition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InformationAcquisition"
        string rdf:definition = '''A mental task in which the executing agent acquires some information that was not immediately available to it before.
A synonym might be "Thinking".

Examples include recalling knowledge or inferring some information from other information.'''
    }

    class "_class_Premise" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Premise"
        string rdf:definition = "The role of an object that is used to infer some conclusion via some inference rules."
    }

    class "_class_DesignedTool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DesignedTool"
        string rdf:definition = "An item designed to enable some action, in which it will play an instrumental role."
    }

    class "_class_DestroyedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DestroyedObject"
        string rdf:definition = "An object that is detroyed."
    }

    class "_class_Destruction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Destruction"
        string rdf:definition = """A process by which a physical Entity is destroyed.

Note, most of the physical Entities we are concerned with are actually arrangements of many smaller physical Entities, so another way to look at this is that a 'Physical destruction' is a process by which an arrangement of physical Entities, which was previously itself considered a physical Entity, is changed to such an extent that it is no longer recognized as continuing to exist."""
    }

    class "_class_DetectedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DetectedObject"
        string rdf:definition = "An object that is detected."
    }

    class "_class_DeviceState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeviceState"
        string rdf:definition = "A quality belonging to a device which indicates its overall functional state."
    }

    class "_class_DeviceStateRange" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeviceStateRange"
        string rdf:definition = "This class defines the values that a device state can take."
    }

    class "_class_DeviceTurnedOff" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeviceTurnedOff"
        string rdf:definition = "A value indicating a device is not in operation."
    }

    class "_class_DeviceTurnedOn" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DeviceTurnedOn"
        string rdf:definition = "A value indicating a device is in operation."
    }

    class "_class_DirectedMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "DirectedMotion"
        string rdf:definition = "A Motion that is considered to be toward a location or along a path. It is not important that the final location or path be the intention of some Agent, but it is considered that the important feature of this Motion is that it has a path and/or destination."
    }

    class "_class_UndirectedMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "UndirectedMotion"
        string rdf:definition = "A Motion of a physical Entity for which a destination or path are unknown and/or considered irrelevant; the important aspect about this Motion is simply that it occurs, rather than where it is headed or how it proceeds towards it."
    }

    class "_class_Dirty" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dirty"
        string rdf:definition = "A cleanliness region with values considered as dirty."
    }

    class "_class_Discourse" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Discourse"
        string rdf:definition = "A mental task, in which two or more agents discuss some topic via multiple Illocutionary acts, which are part of this task."
    }

    class "_class_Distancing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Distancing"
        string rdf:definition = "A task in which an Agent increases its distance from some location."
    }

    class "_class_Dreaming" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Dreaming"
        string rdf:definition = "Any form of re-processing episodic memories for long-term memory by natural or aritifical agents."
    }

    class "_class_Driving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Driving"
        string rdf:definition = "A process type classifying a motion of a body that exists because this body is attached to and controls some other moving body, usually a vehicle."
    }

    class "_class_Flying" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Flying"
        string rdf:definition = "A process type classifying a motion of a body that, through its own power, keeps itself aloft."
    }

    class "_class_Swimming" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Swimming"
        string rdf:definition = "A motion of some body through water. The body provides the power for the motion."
    }

    class "_class_Walking" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Walking"
        string rdf:definition = "An agent, under its own power, moves over some solid surface."
    }

    class "_class_ESTSchemaTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ESTSchemaTheory"
        string rdf:definition = """A schematic theory that describes the existence of an entity.

Developmental psychology posits that \"object permanence\" (the assumption that physical objects keep existing even when the agent doesn't perceive them, which consequently informs reasoning about where an object should be, even when perception of it is lost) is a cognitive ability that is not, at least in the very young human child, immediately manifest. Rather, it seems learned via interaction, and usually is among an infant's cognitive repertoire by age 2.

In SOMA, we represent this ability of a cognitive agent as an ability to generate and maintain ESTSchemaTheories. Each instance of such a theory refers to one particular physical object, the one that the instance of the ESTSchemaTheory asserts to exist.

Because each instance of an ESTSchemaTheory refers to a single object, ESTSchemaTheories are not associated to any relation between OWL individuals."""
    }

    class "_class_ExistingObjectRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExistingObjectRole"
        string rdf:definition = """A role that requires of its filler simply to exist, unlike other roles that may demand e.g. agentive or instrumental participation in some executable schema or plan (AgentRole and Instrument respectively).

The intention behind such a simple role is to have a way to represent, in a schematic formalism used to describe some scene, that an object is present. In particular, the schema used to convey this information is the ESTSchemaTheory, which has ExistingObjectRole as its sole defined role."""
    }

    class "_class_Effort" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Effort"
        string rdf:definition = "A parameter describing the amount of force to be exerted by some actuator."
    }

    class "_class_EnclosedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "EnclosedObject"
        string rdf:definition = "An object included within the spatial boundaries of another object."
    }

    class "_class_EndEffectorPositioning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "EndEffectorPositioning"
        string rdf:definition = "A task in which an Agent places its end effectors at particular poses."
    }

    class "_class_Manipulating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Manipulating"
        string rdf:definition = '''Tasks where the goal is to move the prehensile effectors, ie. hands, of an agent so as to achieve some spatial or functional relation with some manipulated object. 

Spatial relations refer to positioning the hands in certain ways relative to the manipulated object, for example nearing or distancing them, or aligning them with some relevant axis.

Functional relations here refer to interactions between the hands and manipulated object which constrain the possible behavior of the object. Examples of functional relations in manipulation are support and kinematic control.

Note that manipulation tasks are usually performed with the intention of moving an object in some way, so there is a large conceptual overlap between Manipulating and Actuating.

However these concepts are nonetheless distinguished in what they "profile", ie. what they focus on as particularly important.

Actuating profiles the movement of the object itself.

Manipulating profiles the movement of the hands and the functional relations, such as kinematic control, they establish with the manipulated object.

Note: we employ Manipulating here in its literal, original sense, of using hands for some purpose, and not in the metaphorical sense of exerting psychological pressure on someone.'''
    }

    class "_class_Episode" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Episode"
        string rdf:definition = ""
    }

    class "_class_ExcludedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExcludedObject"
        string rdf:definition = "An object that is not contained in something. This is meant very general and includes, e.g., elements excluded from a set, or things that are spatially excluded from the boundaries of some object."
    }

    class "_class_ExecutableFile" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutableFile"
        string rdf:definition = '''An Executable File, sometimes simply referred to as an executable or binary, causes a computer "to perform indicated tasks according to encoded instructions", as opposed to a data file that must be interpreted (parsed) by a program to be meaningful.

The exact interpretation depends upon the use. "Instructions" is traditionally taken to mean machine code instructions for a physical CPU. In some contexts, a file containing scripting instructions (such as bytecode) may also be considered executable.'''
    }

    class "_class_Executable_Code" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Executable_Code"
        string rdf:definition = "Executable Code is Code that when compiled / interpreted, has some clear entrance point and can be executed. Note the difference to an Executable File, which is the file that contains such (compiled) code."
    }

    class "_class_ExecutableFormat" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutableFormat"
        string rdf:definition = "An Executable Format is a File Format that allows computers to directly execute the content. Examples are MZ (DOS) or COFF."
    }

    class "_class_SchematicTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SchematicTheory"
        string rdf:definition = """A theory used to describe, analyze, and reason with the meaning of a linguistic message.

Note that such theories are useful both when analyzing an actual linguistic production, and when creating a linguistic production to describe some observed experience."""
    }

    class "_class_ExecutableSoftware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExecutableSoftware"
        string rdf:definition = "Executable Software is Software that can directly be executed, in comparison to a Software Library, which might only contain functionality via interfaces, but offers no execution entry point."
    }

    class "_class_Software" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Software"
    }

    class "_class_RelationAdjacentRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelationAdjacentRole"
        string rdf:definition = "A role classifying an object participating in some relation, e.g. a participant in a spatial relation or a linguistic fragment in a rhetorical relation to another."
    }

    class "_class_ExtractedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ExtractedObject"
        string rdf:definition = "An object that is removed from a container or system."
    }

    class "_class_PhysicalQuality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalQuality"
        string rdf:definition = "Any aspect of an entity that is dependent on its physical manifestation."
    }

    class "_class_FailedAttempt" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FailedAttempt"
        string rdf:definition = "A description of a failed attempt to achieve some goal."
    }

    class "_class_Unsuccessfulness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Unsuccessfulness"
        string rdf:definition = "A description of a situation with a goal that was not or not fully achieved by some system."
    }

    class "_class_FaultySoftware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FaultySoftware"
        string rdf:definition = "A description of a situation where some software has a bug."
    }

    class "_class_SoftwareDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoftwareDiagnosis"
        string rdf:definition = "A diagnosis of the software of a system."
    }

    class "_class_PhysicalAcquiring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAcquiring"
        string rdf:definition = """The goal of this task is to make some object usable for other tasks, by possibly changing its physical state. Usually, it overlaps some task that describes the manner in which an object is obtained.

The prototypical example of PhysicalAcquiring is picking up an object.

Note that buying an object is NOT PhysicalAcquiring. Buying, or ownership transfer in general, also involves an adjustment in social structures describing ownership."""
    }

    class "_class_Finger" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Finger"
        string rdf:definition = "A limb used for grasping objects."
    }

    class "_class_Hand" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Hand"
        string rdf:definition = "A prehensile effector including palm, fingers, and thumb."
    }

    class "_class_FixedJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FixedJoint"
        string rdf:definition = "A joint that cannot move, designed to fixiate links."
    }

    class "_class_MovableJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MovableJoint"
        string rdf:definition = "A joint where the two connected links can move relative to each other in some dimension."
    }

    class "_class_FloatingJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FloatingJoint"
        string rdf:definition = "A joint that allows motion for all 6 degrees of freedom."
    }

    class "_class_MovedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MovedObject"
        string rdf:definition = "An object undergoing location change."
    }

    class "_class_Focusing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Focusing"
        string rdf:definition = "The mental task to center the attention to some subject."
    }

    class "_class_Foolishness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Foolishness"
        string rdf:definition = "A description of foolish behavior."
    }

    class "_class_ForgettingIncorrectInformation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ForgettingIncorrectInformation"
        string rdf:definition = "A mental task in which the executing agent aims to correct its present information by deleting an incorrect information."
    }

    class "_class_InformationDismissal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InformationDismissal"
        string rdf:definition = """A mental task in which the executing agent dismisses some information.

An example is forgetting some knowledge."""
    }

    class "_class_ForgettingIrrelevantInformation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ForgettingIrrelevantInformation"
        string rdf:definition = "A mental task in which the executing agent aims to clean up its present information by deleting an irrelevant information."
    }

    class "_class_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Language"
        string rdf:definition = """A Language is a structured System for communication.

From Wikipedia: https://en.wikipedia.org/wiki/Language"""
    }

    class "_class_Item" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Item"
        string rdf:definition = "A role played by a non-agentive object operated on by an action."
    }

    class "_class_FunctionalDesign" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalDesign"
        string rdf:definition = "The design of an object from functionality point of view. A functional design is useful to develop complex modular objects with components that have a specific purpose, and can function with minimum side effect on other components of that object. "
    }

    class "_class_FunctionalDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "FunctionalDiagnosis"
        string rdf:definition = "An internal diagnosis of a system."
    }

    class "_class_LocatumRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LocatumRole"
        string rdf:definition = "Denotes the object with primary focal prominence in a spatial or spatio-temporal schema. Terminological variants that appear in the literature on cognitive linguistics include Figure (Talmy 1983) and Trajector (Langacker 1986)."
    }

    class "_class_RelatumRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelatumRole"
        string rdf:definition = "Denotes the reference object in a spatial or spatio-temporal schema, i.e. the object with secondary focal prominence. Terminological variants: Ground (Talmy 1983), Landmark (Langacker 1986)."
    }

    class "_class_GetTaskParameter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GetTaskParameter"
        string rdf:definition = "A task in which an Agent computes some parameter relevant for another task."
    }

    class "_class_Planning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Planning"
        string rdf:definition = "A Mental task in which the Agent endeavours to create a sequence of actions for itself which, if followed, will bring about a particular state of affairs in the world. This particular state of affairs is known to the agent and is often called the goal state of the planning action. Planning commits itself to feasibility: the Agent attempts to find a sequence of actions that it believes it will actually be able to perform."
    }

    class "_class_GraphDatabase" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GraphDatabase"
        string rdf:definition = "A Graph Database is a Database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data."
    }

    class "_class_GraphQueryLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GraphQueryLanguage"
        string rdf:definition = "A Query Language that is designed for communication with some Graph Database."
    }

    class "_class_QueryLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QueryLanguage"
        string rdf:definition = '''Query languages, are Computer languages used to make queries in databases and information systems (Source: https://en.wikipedia.org/wiki/Query_language).

Note that despite their name, Query languages typically come with syntax and semantic to not only ask for information, but also provide them, e.g., via SQL Update. In that sense, the term "query" from above refers to any formal object of information exchange with a database.'''
    }

    class "_class_GraspTransfer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GraspTransfer"
        string rdf:definition = "A task in which an Agent switches which of its end effectors holds an object."
    }

    class "_class_Releasing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Releasing"
        string rdf:definition = "A task in which an agent relinquishes its kinematic control over an object, typically by releasing it from its grasp."
    }

    class "_class_GraspingMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GraspingMotion"
        string rdf:definition = "A process type classifying a motion by which some end effector acquires kinematic control over some other object."
    }

    class "_class_IntermediateGrasp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "IntermediateGrasp"
        string rdf:definition = "A kind of grasp that acquires kinematic control over the gripped object, but without attempting to achieve either strong holding force nor precision of subsequent movement of the gripped object."
    }

    class "_class_PowerGrasp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PowerGrasp"
        string rdf:definition = "An Agent grasps an object, and focuses on obtaining a strong grasping force upon it, resulting in a grasp able to resist significant outside disturbances. This is useful when using tools with which to later exert force on other things, e.g. when hammering nails."
    }

    class "_class_PrecisionGrasp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PrecisionGrasp"
        string rdf:definition = "An Agent grasps an object, and focuses on obtaining precise kinematic control over it. This is useful for then following precise movements, e.g. when writing."
    }

    class "_class_PrehensileMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PrehensileMotion"
        string rdf:definition = "A motion of a prehensile effector."
    }

    class "_class_ReleasingMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ReleasingMotion"
        string rdf:definition = "A motion by which a prehensile effector relinquishes kinematic control over an object."
    }

    class "_class_GreenColor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "GreenColor"
        string rdf:definition = "A color region with dominant green color."
    }

    class "_class_Gripper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Gripper"
        string rdf:definition = "A mechanical device that grasps and holds things."
    }

    class "_class_PrehensileEffector" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PrehensileEffector"
        string rdf:definition = "An effector used to grasp objects, such as a hand of a human, or the long prehensile tail of a monkey."
    }

    class "_class_HardwareDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HardwareDiagnosis"
        string rdf:definition = "A diagnosis of the hardware of a system."
    }

    class "_class_TechnicalDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TechnicalDiagnosis"
        string rdf:definition = "A functional diagnosis of a technical system."
    }

    class "_class_HasQualityRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HasQualityRegion"
        string rdf:definition = "The relation between an individual quality and a region."
    }

    class "_class_Head" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Head"
        string rdf:definition = "A functional part of the body responsible for carrying high bandwidth sensors, i.e., camera."
    }

    class "_class_HeadMovement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HeadMovement"
        string rdf:definition = "The Agent moves a part of their body carrying high-bandwidth sensors such as cameras. The movement of other body parts is not significant."
    }

    class "_class_HeadTurning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HeadTurning"
        string rdf:definition = "A process type classifying a motion of an Agent's head such that the direction this head faces changes relative to the facing direction of the Agent's body as a whole."
    }

    class "_class_Holding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Holding"
        string rdf:definition = "A task by which an Agent keeps an object over which it has kinematic control, typically via grasping, at some specified pose."
    }

    class "_class_HostRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HostRole"
        string rdf:definition = """In the Plug-in-Host pattern, a Host application provides services which the Plug-in can use, including a way for Plug-ins to register themselves with the Host application and a protocol for the exchange of data withPplug-ins. Plug-ins depend on the services provided by the host application and do not usually work by themselves. Conversely, the host application operates independently of the plug-ins, making it possible for end-users to add and update plug-ins dynamically without needing to make changes to the host application.

Source: https://en.wikipedia.org/wiki/Plug-in_(computing)"""
    }

    class "_class_PluginSpecification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PluginSpecification"
        string rdf:definition = "The Specification of a Plugin interface defines how a Host and a Plug-in function together and exchange information."
    }

    class "_class_Humanreadable_Programming_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Human-readable_Programming_Language"
        string rdf:definition = "A Programming language like Java, Python etc. but not binary machine code."
    }

    class "_class_Source_Code" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Source_Code"
        string rdf:definition = "The Source Code itself (the specific set of instruction in a human-readable Programming Language), not the file that it is contained in nor the implemented algorithm!"
    }

    class "_class_HumanActivityRecording" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "HumanActivityRecording"
        string rdf:definition = "An episode in which one or more human beings perform an activity and are recorded doing so."
    }

    class "_class_RecordedEpisode" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RecordedEpisode"
        string rdf:definition = "An episode which has been recorded."
    }

    class "_class_Imagining" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Imagining"
        string rdf:definition = "A Mental task in which the Agent constructs a mental representation of a possible world. An Agent performing an Imagining activity does not aim to construct a representation that aspires to be faithful to some past, present, or future state of affairs of the actual world it is embodied in."
    }

    class "_class_Impediment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Impediment"
        string rdf:definition = "The disposition of an object (the obstacle) to prohibit certain ways of entering or leaving a space or group. An example is a doorstopper constraining a door, prohibiting it to enter the area behind it."
    }

    class "_class_Obstacle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Obstacle"
        string rdf:definition = "An object used to restrict access to a protected space or group."
    }

    class "_class_RestrictedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RestrictedObject"
        string rdf:definition = "An object with restrictions to access something."
    }

    class "_class_Inability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Inability"
        string rdf:definition = "A description of a situation with a goal that some system is unable to achieve."
    }

    class "_class_IncompatibleSoftware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "IncompatibleSoftware"
        string rdf:definition = "A description of a situation where two software systems are incompatible with each other."
    }

    class "_class_InductiveReasoning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InductiveReasoning"
        string rdf:definition = '''A task in which the Agent endeavors to accumulate confidence in some general statement about the world, by gathering instances in which this general statement appears to apply. Note that perfect confidence can never be guaranteed by induction.

Induction is often described as a move from many "specifics" (swan A is white, swan B is white, swan C is white, ...) to the "general" (all swans are white).'''
    }

    class "_class_Infeasibility" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Infeasibility"
        string rdf:definition = "A description of a situation with a goal that is impossible to achieve in some situational context."
    }

    class "_class_InferenceRules" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InferenceRules"
        string rdf:definition = "The role of an object that is used to derive a conclusion from some premises."
    }

    class "_class_InformationRetrieval" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InformationRetrieval"
        string rdf:definition = """A mental task in which an Agent recalls some knowledge that has been memorized previously.

Examples include a human remembering some information or a computer retrieving knowledge from a database.

The difference to Remembering is that for this Task, we are concerned with knowledge about a previous world state. Memory Retrieval is more general in the sense that it also includes the retrieval of learned facts and rules."""
    }

    class "_class_InformationStorage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InformationStorage"
        string rdf:definition = """A mental task in which the executing agent persists some information for later recall, if necessary.

An example is learning new knowledge."""
    }

    class "_class_StoredObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StoredObject"
        string rdf:definition = "An object being stored into some other object, usually inside a container."
    }

    class "_class_InsertedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InsertedObject"
        string rdf:definition = "An object inserted into another object."
    }

    class "_class_Insertion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Insertion"
        string rdf:definition = "The disposition of an object (the container) to contain other objects that can be inserted into the container through a portal."
    }

    class "_class_Instructions" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Instructions"
        string rdf:definition = "The role of a plan to follow during an execution task."
    }

    class "_class_Interpreting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Interpreting"
        string rdf:definition = "A task in which an Agent interpretes some information, e.g., makes sense of some incoming message or its visible surroundings."
    }

    class "_class_InterrogativeClause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "InterrogativeClause"
        string rdf:definition = '''A clause which makes a request, typically information, of some agent.

Note that in a semantic sense such clauses always request information, but in a pragmatic sense they can be used to convey commands or requests for action, such as e.g. "can you close the door?" The question is not just a request for information about ability, but a request to perform a task.'''
    }

    class "_class_Introspecting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Introspecting"
        string rdf:definition = "A mentalk task in which an Agent gathers and processes information about its own mental tasks via, e.g., Meta Reasoning."
    }

    class "_class_KineticFrictionAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KineticFrictionAttribute"
        string rdf:definition = "Friction that occurs when two touching objects are moving relative to each other."
    }

    class "_class_KinoDynamicData" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KinoDynamicData"
        string rdf:definition = "An InformationObject containing data about how a physical object is put together such that its parts may move relative to each other, and what the physical characteristics of those parts are."
    }

    class "_class_KnowledgeRepresentationLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "KnowledgeRepresentationLanguage"
        string rdf:definition = "A Knowledge Representation Language is a Language with fixed semantics and syntax to describe some knowledge. Examples are JSON and the different OWL Profiles."
    }

    class "_class_Labeling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Labeling"
    }

    class "_class_Text" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Text"
        string rdf:definition = """Any Information Object defined using a Language that, when realized through a symbolic writing system, can be read and made sense of.

One may define Text as anything that can be made sense of, including e.g., Speech or Paintings.

However, the argument can be made that Speech or Paintings are not considered Text as they cannot be EXACTLY realized by a symbolic writing system: Speech may loose punctuation, Paintings their original appearance.
On the other hand, this might not be true as both could be encoded in a binary format that can be interpreted using a language (eg., mp3, png)."""
    }

    class "_class_Leaning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Leaning"
        string rdf:definition = "An Agent pitches its body in some direction."
    }

    class "_class_PosturalMoving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PosturalMoving"
        string rdf:definition = """The Agent changes or takes an overall configuration of its body but is otherwise not significantly affecting other objects nor moving a significant amount from its original location.

Posture changes may take place as part of other actions, for example turning when walking."""
    }

    class "_class_Learning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Learning"
        string rdf:definition = """The mental task of storing information for later use.

This is more general than memorizing, as the later only captures declarative knowledge."""
    }

    class "_class_Leg" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Leg"
        string rdf:definition = "A limb on which an agent walks or stands."
    }

    class "_class_LimbMotion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LimbMotion"
        string rdf:definition = "An Agent moves its limbs in some way."
    }

    class "_class_LinkedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LinkedObject"
        string rdf:definition = "An object that is linked to some other object."
    }

    class "_class_LinkageState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LinkageState"
        string rdf:definition = "Classifies States in which two objects are in a rigid connection, such that the movement of one determines the movement of the other."
    }

    class "_class_SpatioTemporalRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SpatioTemporalRole"
        string rdf:definition = "Roles that classify entities which locate an event or object in space and time."
    }

    class "_class_SpatialRelationRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SpatialRelationRole"
        string rdf:definition = "Roles classifying entities participating in some spatial relation."
    }

    class "_class_LocutionaryAction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LocutionaryAction"
        string rdf:definition = """A Locutionary Act is the performance of an utterance (source: https://en.wikipedia.org/wiki/Locutionary_act).

We additionally require a Locutionary Act to be performed by an Agent, not an Actor - this is what sets it apart from a Communication Action."""
    }

    class "_class_LookingAt" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LookingAt"
        string rdf:definition = "better: Gazing"
    }

    class "_class_LookingFor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "LookingFor"
        string rdf:definition = "A task by which an Agent uses its perception apparatus to check for the presence of an object in some specified area."
    }

    class "_class_Lowering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Lowering"
        string rdf:definition = "A task in which an Agent reduces the elevation at which they hold an item."
    }

    class "_class_PhysicalAction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAction"
        string rdf:definition = "An action performed by an agent by using its body in some way to interact with the physical world, e.g., through manipulation of objects, or by changing the posture."
    }

    class "_class_Markup_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Markup_Language"
        string rdf:definition = """Markup refers to data included in an electronic document which is distinct from the document's content in that it is typically not included in representations of the document for end users, for example on paper or a computer screen, or in an audio stream. Markup is often used to control the display of the document or to enrich its content to facilitate automated processing. A markup language is a set of rules governing what markup information may be included in a document and how it is combined with the content of the document in a way to facilitate use by humans and computer programs.

From Wikipedia: https://en.wikipedia.org/wiki/Markup_language"""
    }

    class "_class_Material" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Material"
        string rdf:definition = "The matter from which a thing is made."
    }

    class "_class_MedicalDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MedicalDiagnosis"
        string rdf:definition = "A functional diagnosis of an organism."
    }

    class "_class_Memorizing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Memorizing"
        string rdf:definition = """An atomic mental task in which an Agent saves some (declarative) information for later retrieval.

Examples include a student learning vocabularies or a computer saving some information to a database."""
    }

    class "_class_MentalAction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MentalAction"
        string rdf:definition = """An Event construed as the Agent participant affecting Entities that are representations of actual or potential Entities or Events in the physical world in which the Agent is embodied. These representations are maintained by the Agent participant in the 'Mental action' event.

One could argue Mental actions are all Physical actions, because anything the Agent may use to maintain such representations will be physical things, However, we make this distinction because for Mental actions it is less important to consider the physical support of the representation and how it changes, and more important to track how the information content of the representation changes."""
    }

    class "_class_MeshShape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MeshShape"
        string rdf:definition = "A solid geometrical figure described in a mesh file."
    }

    class "_class_MeshShapeData" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MeshShapeData"
        string rdf:definition = "An InformationObject containing data about the geometry of a physical object."
    }

    class "_class_MetaCognitionEvaluationTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetaCognitionEvaluationTopic"
        string rdf:definition = "A topic used while an Agent describes its own cognitive processes and acions to evaluate them according to some metric."
    }

    class "_class_MetaCognitionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetaCognitionTopic"
        string rdf:definition = "A topic for a description that an Agent might make of its own cognitive processes and actions."
    }

    class "_class_MetaCognitionMemoryTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetaCognitionMemoryTopic"
        string rdf:definition = "A topic used while an Agent describes its own cognitive processes and actions, and which covers descriptions of what memories are involved in them."
    }

    class "_class_MetaCognitionPlanningTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetaCognitionPlanningTopic"
        string rdf:definition = "A topic used while an Agent describes the planning it does for its own cognitive processes and actions."
    }

    class "_class_ThinkAloudTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudTopic"
        string rdf:definition = "A topic relevant for a think-aloud communication."
    }

    class "_class_MetacognitiveControlling" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetacognitiveControlling"
        string rdf:definition = "The concious or subconcious task to control the own mental processes, e.g., evaluating them and instructing the own mind to shift attention."
    }

    class "_class_MetacognitiveMonitoring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MetacognitiveMonitoring"
        string rdf:definition = "The task to label the processes and states of the own mind, e.g., to interprete the feeling of knowing an information but not being able to retrieve it at the moment as a tip-of-the-tongue event."
    }

    class "_class_MixingTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MixingTheory"
        string rdf:definition = "A schematic theory about how an agent can mix a fluid or particulate object."
    }

    class "_class_MonitoringJointState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MonitoringJointState"
        string rdf:definition = "A task in which the Agent keeps track of the physical state of its joints, e.g. their positions, velocities, efforts."
    }

    class "_class_Proprioceiving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Proprioceiving"
        string rdf:definition = "A task in which the Agent gathers and interprets sensor information about itself."
    }

    class "_class_ProcessFlow" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ProcessFlow"
        string rdf:definition = "A description that structures a Process."
    }

    class "_class_PhysicsProcess" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicsProcess"
        string rdf:definition = "A process involving physical objects and phenomena which does not change the chemical constituency of the affected objects."
    }

    class "_class_MovingAway" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MovingAway"
        string rdf:definition = "A process type classifying a motion by which some Agent puts distance between itself and another object or location."
    }

    class "_class_MovingTo" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "MovingTo"
        string rdf:definition = "A task in which an Agent moves towards a location."
    }

    class "_class_Natural_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Natural_Language"
        string rdf:definition = """A Natural Language is any language that has evolved naturally in humans through use and repetition without conscious planning or premeditation.

From Wikipedia: https://en.wikipedia.org/wiki/Natural_language"""
    }

    class "_class_Natural_Language_Text" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Natural_Language_Text"
        string rdf:definition = "A Text in a Natural Language."
    }

    class "_class_Ontology" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Ontology"
        string rdf:definition = """An ontology encompasses a representation, formal naming, and definition of the categories, properties, and relations between the concepts, data, and entities that substantiate one, many, or all domains of discourse. More simply, an ontology is a way of showing the properties of a subject area and how they are related, by defining a set of concepts and categories that represent the subject.

From Wikipedia: https://en.wikipedia.org/wiki/Ontology_(information_science)"""
    }

    class "_class_Ontology_Language" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Ontology_Language"
        string rdf:definition = """An Ontology Language is a Knowledge Representation Language to describe knowledge about properties of a subject area and how they are related, by defining a set of concepts and categories that represent the subject using logic. Examples are the different OWL Profiles.

Source: https://en.wikipedia.org/wiki/Ontology_(information_science)"""
    }

    class "_class_Option" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Option"
        string rdf:definition = "The Role of objects that are used, e.g., in Selecting Tasks."
    }

    class "_class_Singleton" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Singleton"
        string rdf:definition = "A 'Set' that contains exactly one member."
    }

    class "_class_Orienting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Orienting"
        string rdf:definition = "A task in which an Agent adjusts the orientation of an object."
    }

    class "_class_Positioning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Positioning"
        string rdf:definition = "A task in which an Agent places an object at a particular position."
    }

    class "_class_ParkingArms" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ParkingArms"
        string rdf:definition = "A task by which an Agent arranges its arms in such a way so as to minimize opportunities for collision while moving through the environment."
    }

    class "_class_PhaseTransition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhaseTransition"
        string rdf:definition = "An EventType that classifies processes by which matter changes from some distinguishable phase to another. We will use this to refer to the classical phase transitions between Solid, Liquid, Gaseous, Plasma etc. phases."
    }

    class "_class_PhysicalAccessibility" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAccessibility"
        string rdf:definition = "Classifies States in which an item is placed in a container or protected by a protector, but the placement of the item and container is such that a, usually agentive, accessor may nevertheless reach the item in order to perform a task."
    }

    class "_class_PhysicalBlockage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalBlockage"
        string rdf:definition = "Classifies States in which an object, in general called restrictor, blocks access to an item. A usually agentive accessor, whose access is blocked, may be specified."
    }

    class "_class_PhysicalExistence" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalExistence"
        string rdf:definition = "A State in which an Entity is said to exist in the physical world."
    }

    class "_class_PhysicalState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PhysicalState"
        string rdf:definition = "A State describing how Entities in the physical world relate to each other."
    }

    class "_class_PlacingTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PlacingTheory"
        string rdf:definition = "A schematic theory of how an agent can place a patient at a particular goal location."
    }

    class "_class_PlanarJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PlanarJoint"
        string rdf:definition = "A joint that allows motion in a plane perpendicular to an axis."
    }

    class "_class_PluginRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PluginRole"
        string rdf:definition = """In the Plug-in-Host pattern, a Host application provides services which the Plug-in can use, including a way for Plug-ins to register themselves with the Host application and a protocol for the exchange of data withPplug-ins. Plug-ins depend on the services provided by the host application and do not usually work by themselves. Conversely, the host application operates independently of the plug-ins, making it possible for end-users to add and update plug-ins dynamically without needing to make changes to the host application.

Source: https://en.wikipedia.org/wiki/Plug-in_(computing)"""
    }

    class "_class_PouredObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PouredObject"
        string rdf:definition = "An object being poured into or onto some other object. A role of some fluid or substance that is the patient of pouring task."
    }

    class "_class_PouringInto" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PouringInto"
        string rdf:definition = "The task in which the agent pours the substance into another object."
    }

    class "_class_PouringOnto" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PouringOnto"
        string rdf:definition = "The task in which an agent pours the substance on top of an object"
    }

    class "_class_Prediction" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Prediction"
        string rdf:definition = "A Mental task in which the Agent endeavours to construct a representation of a future state of the world. Prediction commits itself to some degree of accuracy: the Agent believes that eventually something similar to the predicted state will come to pass."
    }

    class "_class_Prospecting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Prospecting"
        string rdf:definition = "A Mental task in which an Agent endeavours to construct a representation of a future state of affairs of the world it is embodied in."
    }

    class "_class_Predilection" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Predilection"
        string rdf:definition = """The relation between a 'Preference' and the 'Order' that the 'Preference' defines over Situations.

For the complete model, see 'Preference'."""
    }

    class "_class_PreferenceOrder" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PreferenceOrder"
        string rdf:definition = "The relation between a 'Preference' and the 'Order' that the 'Preference' defines over Descriptions of Situations."
    }

    class "_class_PreferenceRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PreferenceRegion"
        string rdf:definition = "The 'Region' of 'Preference's, containing all possible 'Order's between all possible 'Situation's."
    }

    class "_class_PrismaticJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PrismaticJoint"
        string rdf:definition = "A sliding joint that slides along an axis, and has a limited range specified by the upper and lower limits."
    }

    class "_class_Progression" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Progression"
        string rdf:definition = "A situation that sattisies a description of how a process evolves over time."
    }

    class "_class_Protector" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Protector"
        string rdf:definition = "A role classifying an object that protects another by preventing other entities from coming in contact with the protected object."
    }

    class "_class_ProximalTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ProximalTheory"
        string rdf:definition = """An image schematic theory that describes a qualitative spatial relation indicating relative proximity, as expressed by the prepositions 'near', 'close to', 'next to', etc.

It may seem that proximity is a very simple notion, requiring no sophisticated theoretical underpinnings. However, proximity is an extremely object- and purpose-dependent relation. A store next door is in a closeness relation to a person, and so is the Sun in the sky, despite the physical distances being different by several orders of magnitude.

As such, a theory, i.e. a description of what a particular kind of closeness means and in which contexts it applies, is necessary.

Adopted from GUM-4-space (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL 'near to' xR."""
    }

    class "_class_PushingAway" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PushingAway"
        string rdf:definition = "A task in which an Agent pushes an object in front of themselves."
    }

    class "_class_PushingDown" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PushingDown"
        string rdf:definition = "A task in which an Agent pushes an object downwards."
    }

    class "_class_PuttingDown" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "PuttingDown"
        string rdf:definition = "A task in which an Agent puts down an object they have kinematic control over, e.g. a grasped object."
    }

    class "_class_QualityTransition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QualityTransition"
        string rdf:definition = "todo(DB): added for NEEMs (quale change), but not sure yet about it..."
    }

    class "_class_Query" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Query"
        string rdf:definition = "A role played by some Information Realization that carries meaning, where this meaning is a query of some sort."
    }

    class "_class_QueryAnsweringTask" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QueryAnsweringTask"
        string rdf:definition = '''An Answering task that is the reaction to some Query answering task.

In a lot of cases, such a task is also an Assertion task, e.g., in the following discourse:

"How will the weather be tomorrow?"
"It is going to rain in the morning."

However, sometimes this might be not the case, e.g., with counterquestions.'''
    }

    class "_class_QueryEngine" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "QueryEngine"
        string rdf:definition = "A Query Engine is a Software that can answer some queries."
    }

    class "_class_Reaching" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Reaching"
        string rdf:definition = "A task in which an Agent moves one or more of its arms towards a location or object."
    }

    class "_class_Retracting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Retracting"
        string rdf:definition = "A task in which an Agent moves its arms away from a location."
    }

    class "_class_Reasoner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Reasoner"
        string rdf:definition = """A Reasoner is some Software that can infer new, implicit knowlegde from explicitly stated knowledge.

This definition is broad and we consider any System fitting the above description as reasoners. For example, the following can be seen as Reasoners:
* A simulation, where the explicit knowledge corresponds to the initial situation, and the implicit knowlegde corresponds to the situation that is derived from that by simulating some unfolding processes.
* A machine learning algorithm, e.g., an image classifier: The explicit knowledge is the visual content of a picture (even down to the pixel), the implicit knowledge is the derived classification.
* A logic based rule engine, where initial facts are the explicit knowledge, and derived facts are the implicit knowledge."""
    }

    class "_class_RedColor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RedColor"
        string rdf:definition = "A color region with dominant red color."
    }

    class "_class_Reification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Reification"
        string rdf:definition = "A description that *describes* a formal entity."
    }

    class "_class_RelationalDatabase" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelationalDatabase"
        string rdf:definition = '''A Relational Database is a Database based on the relational model of data, which organizes data into one or more tables (or "relations") of columns and rows, with a unique key identifying each row.

Source: https://en.wikipedia.org/wiki/Relational_database'''
    }

    class "_class_RelationalQueryLanguage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelationalQueryLanguage"
        string rdf:definition = "A Query Language that is designed for communication with some Relational Database."
    }

    class "_class_RelevantPart" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RelevantPart"
        string rdf:definition = "Features that are relevant parts of their host, like a bump or an edge."
    }

    class "_class_Remembering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Remembering"
        string rdf:definition = """A Mental task in which the Agent recalls a record of a previous state of affairs in the world.

The Agent must have witnessed and memorized this state of affairs in order to record it. Remembering commits itself to accuracy: the Agent attempts to reconstruct as accurate a record as it can. Note, this does not mean the Agent will communicate the recollection accurately.

The difference to Memory retrieval is that for this Task, we are concerned with knowledge about a previous world state. Memory Retrieval is more general in the sense that it also includes the retrieval of learned facts and rules."""
    }

    class "_class_Retrospecting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Retrospecting"
        string rdf:definition = "A Mental task in which an Agent endeavors to construct a representation of a past state of affairs of the world it is embodied in."
    }

    class "_class_RemovedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RemovedObject"
        string rdf:definition = "An object that is removed from another."
    }

    class "_class_Replanning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Replanning"
        string rdf:definition = "A mental task, in which an agent reconfigures some plan that has been put together before."
    }

    class "_class_RevoluteJoint" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RevoluteJoint"
        string rdf:definition = "A hinge joint that rotates along an axis and has a limited range specified by the upper and lower limits."
    }

    class "_class_RoomSurface" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "RoomSurface"
        string rdf:definition = "The surface of a room."
    }

    class "_class_Surface" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Surface"
        string rdf:definition = "The outside part or uppermost layer of something."
    }

    class "_class_Rubbing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Rubbing"
        string rdf:definition = "The motion of an object sliding along the surface of another, for example, to clean the surface."
    }

    class "_class_SelectedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SelectedObject"
        string rdf:definition = "An object chosen as the result of some selection task."
    }

    class "_class_Selecting" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Selecting"
        string rdf:definition = "A Task where an Agent decides between two or more options."
    }

    class "_class_SelectingItem" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SelectingItem"
        string rdf:definition = "A task in which an Agent selects some object to use for a subsequent task."
    }

    class "_class_SelfReflection" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SelfReflection"
    }

    class "_class_Serving" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Serving"
        string rdf:definition = "The task in which the agent delivers an object to a physical agent"
    }

    class "_class_SettingGripper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SettingGripper"
        string rdf:definition = "A task by which an Agent arranges one/some/all of its grippers in some configuration."
    }

    class "_class_DPose" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "6DPose"
        string rdf:definition = "A point in three dimensional space, given as translation in a reference coordinate system, and an orientation of a coordinate system centered at that point relative to the reference coordinate system."
    }

    class "_class_Sharpness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sharpness"
        string rdf:definition = "The quality of having a thin edge or point that can cut something or make a hole into something. It is worth to note here that the social aspect of sharpness such as the quality of being clear, intelligent etc is not considered as sharpness according to this definition."
    }

    class "_class_Simulating" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Simulating"
        string rdf:definition = '''A Mental task in which the Agent endeavours to create representations of a sequence of states of affairs in the world. Simulation commits itself to some degree of transition accuracy: supposing the actual state of the world was the initial state of the simulation, the world state and simulation state should evolve to some degree similarly.

Simulation does not commit itself to state accuracy: the initial state of the simulation is not constrained to be faithful to the actual state of the world in which the Agent is embodied. Counterfactual simulation ("what would happen if--?") is possible.'''
    }

    class "_class_Simulation_Reasoner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Simulation_Reasoner"
        string rdf:definition = "A Simulation-based Reasoner is a simulation that is used as a reasoner, where the explicit knowledge corresponds to the initial situation, and the implicit knowlegde corresponds to the situation that is derived from that by simulating some unfolding processes."
    }

    class "_class_Size" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Size"
        string rdf:definition = "The magnitude or dimension of a thing which can be measured as length, width, height, diameter, perimeter, area, volume."
    }

    class "_class_Sluggishness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Sluggishness"
        string rdf:definition = "A description of sluggish behavior."
    }

    class "_class_SocialState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SocialState"
        string rdf:definition = """A State which describes how Agents relate to each other.

One can argue that any Social state is a Physical state, since anything the Agents may use to construct a social relationship is made of physical things. The difference is that the physical support of the social relationships is not important here, what matters instead is the nature and content of the social relations, regardless of how they are physically realized."""
    }

    class "_class_Software_Configuration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Software_Configuration"
    }

    class "_class_SoftwareLibrary" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SoftwareLibrary"
    }

    class "_class_SourceMaterialRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SourceMaterialRole"
        string rdf:definition = "A role classifying a substance or object that enters a process of transformation intended to create some other object."
    }

    class "_class_SphereShape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SphereShape"
        string rdf:definition = "A round solid figure with every point on its surface equidistant from its centre."
    }

    class "_class_Standing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Standing"
        string rdf:definition = "A motion by which an Agent arranges its body in an upright configuration. Typically, it makes sense to speak of standing for bodies where some limbs are dedicated to moving the whole body while some limbs are used for manipulation of other objects."
    }

    class "_class_StaticFrictionAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StaticFrictionAttribute"
        string rdf:definition = "Friction between two touching objects that do not move relative to each other."
    }

    class "_class_StatusFailure" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StatusFailure"
        string rdf:definition = "A status indicating the failure during some workflow execution."
    }

    class "_class_Storage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Storage"
        string rdf:definition = "The disposition of an object (the container) to store other objects. Storage of an object would facilitate several objectives; such as to store objects in a safe or usual place, to prevent the substances e.g. prevention of milk going bad by storing them in a refrigrator."
    }

    class "_class_StructuralDesign" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "StructuralDesign"
        string rdf:definition = """A design of an object which describes its stability, strength and rigidity, and considers the way in which parts of an object are arranged. 
        """
    }

    class "_class_TaskInvocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TaskInvocation"
        string rdf:definition = "An elementary workflow consisting in the invocation of one single task. It is used as a descriptive context inside of which factual bindings are valid between the task's arguments and other entities (such as the \"local variables\" of a larger workflow)."
    }

    class "_class_SuccessDiagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SuccessDiagnosis"
        string rdf:definition = "A diagnosis of the fullfilment of a goal that motivates the behavior of a system."
    }

    class "_class_Successfulness" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Successfulness"
        string rdf:definition = "A description of a situation with a goal that was achieved by some system."
    }

    class "_class_SupportState" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SupportState"
        string rdf:definition = "Classifies States in which an object is not able to move under gravity because of its placement relative to some other object."
    }

    class "_class_Supporter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Supporter"
        string rdf:definition = "A role classifying an object used to support others."
    }

    class "_class_SupportTheory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SupportTheory"
        string rdf:definition = '''An image schematic theory that describes the reified functional relation holding between two spatial objects x and y, such that x physically supports y in the presence of gravity; x and y need not be in contact. An example of such an expression is "The bowl is on the table".

This is also known as FunctionalControlExternal in GUM (Bateman et al. 2010).

Let xL, xR be objects filling the locatum, relatum roles of this schema. Then one can infer that xL isSupportedBy xR.'''
    }

    class "_class_SupportedObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SupportedObject"
        string rdf:definition = "An object that is supported by some supporter."
    }

    class "_class_SymbolicReasoner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "SymbolicReasoner"
        string rdf:definition = """A Symbolic Reasoner, is a piece of software able to infer logical consequences from a set of asserted facts or axioms.

Source: https://en.wikipedia.org/wiki/Semantic_reasoner"""
    }

    class "_class_Tapping" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tapping"
        string rdf:definition = "A motion, usually repeated several times, for example, to probe the surface of an object."
    }

    class "_class_Taxis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Taxis"
        string rdf:definition = "An innate behavioural response such as the knee-jerk reflex or the sucking reflex of human infants."
    }

    class "_class_Temperature" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Temperature"
        string rdf:definition = "The heat present in an object."
    }

    class "_class_TemperatureRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TemperatureRegion"
        string rdf:definition = "Encodes the temperature of an object."
    }

    class "_class_Tempering" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Tempering"
        string rdf:definition = "The disposition of an object (the tool) to change the temperature of others."
    }

    class "_class_ThinkAloud" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloud"
        string rdf:definition = "A task in which an Agent, while in the course of performing some other task(s), reports on their own decision processes that guide this other task(s) for the benefit of an outside observer."
    }

    class "_class_ThinkAloudActionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudActionTopic"
        string rdf:definition = "A topic used when an Agent states what they are doing."
    }

    class "_class_ThinkAloudGeneralKnowledgeTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudGeneralKnowledgeTopic"
        string rdf:definition = "A topic used when an Agent states general knowledge they have."
    }

    class "_class_ThinkAloudKnowledgeTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudKnowledgeTopic"
        string rdf:definition = "A topic used when an Agent states some item of knowledge. This knowledge can be general, or specific to the environment and task at hand."
    }

    class "_class_ThinkAloudObstructionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudObstructionTopic"
        string rdf:definition = "A topic used when an Agent describes some state of affairs that prevents them from performing an action."
    }

    class "_class_ThinkAloudOpinionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudOpinionTopic"
        string rdf:definition = "A topic used when an Agent expresses an opinion about the action they perform or the environment they are in."
    }

    class "_class_ThinkAloudPerceptionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudPerceptionTopic"
        string rdf:definition = "A topic used when an Agent describes what they currently perceive."
    }

    class "_class_ThinkAloudPlanTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudPlanTopic"
        string rdf:definition = "A topic used when an Agent describes what they intend to do. Note, this is not about describing the process through which this plan was constructed; that is covered by the MetaCognitionPlanningTopic."
    }

    class "_class_ThinkAloudSceneKnowledgeTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "ThinkAloudSceneKnowledgeTopic"
        string rdf:definition = "A topic used when an Agent describes what they know about their environment, including knowledge of world states that they do not currently perceive."
    }

    class "_class_Threshold" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Threshold"
        string rdf:definition = "A role played by a parameter which indicates some value that, when crossed, triggers some condition."
    }

    class "_class_Throwing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Throwing"
        string rdf:definition = "A task in which an Agent imparts momentum to an object before releasing it so that it flies for some distance unsupported."
    }

    class "_class_TimeRole" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "TimeRole"
        string rdf:definition = "A role filled by a description of the location in time and/or duration of an event or object."
    }

    class "_class_Triplestore" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Triplestore"
        string rdf:definition = "A Triplestore or RDF store is a purpose-built database for the storage and retrieval of triples through semantic queries."
    }

    class "_class_Turning" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "Turning"
        string rdf:definition = "A motion by which an agent changes which way their body faces."
    }

    class "_class_UnavailableSoftware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "UnavailableSoftware"
        string rdf:definition = "A description of a situation where some software dependency is not available."
    }

    class "_class_VideoData" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "VideoData"
        string rdf:definition = "An information object containing data for audio-visual modalities."
    }

    class "_class_DPosition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_namespace>
    )
    {
        string rdf:conceptName = "3DPosition"
        string rdf:definition = "A point in three dimensional space, given as translation."
    }
}

class "_class_SOMA_DFL_namespace" (
    prepend apiSchemas = ["RdfAPI"]
)
{
    string rdf:namespace = "http://www.ease-crc.org/ont/SOMA_DFL.owl#"
}

def "SOMA_DFL"
{
    class "_class_Agent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Agent"
    }

    class "_class_home_appliancenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "home_appliance.n.wn.artifact"
    }

    class "_class_armchairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "armchair.n.wn.artifact"
    }

    class "_class_arrangevwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "arrange.v.wn.contact"
    }

    class "_class_assemblevwncreation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "assemble.v.wn.creation"
    }

    class "_class_baked_goodsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baked_goods.n.wn.food"
    }

    class "_class_nightstandnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nightstand.n.wn.artifact"
    }

    class "_class_Beneficiary" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Beneficiary"
    }

    class "_class_bladenwnartifactcutting_implement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blade.n.wn.artifact..cutting_implement"
    }

    class "_class_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bottle.n.wn.artifact"
    }

    class "_class_bowlnwnartifactdish" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bowl.n.wn.artifact..dish"
    }

    class "_class_boxnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "box.n.wn.artifact..container"
    }

    class "_class_breadnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bread.n.wn.food"
    }

    class "_class_bread_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bread_knife.n.wn.artifact"
    }

    class "_class_breakfast_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breakfast_plate.n.wn.artifact"
    }

    class "_class_buildingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "building.n.wn.artifact"
    }

    class "_class_sitvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sit.v.wn.contact.Theme"
    }

    class "_class_cutvwncontactseparateInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut.v.wn.contact..separate.Instrument"
    }

    class "_class_carafenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carafe.n.wn.artifact"
    }

    class "_class_ceilingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ceiling.n.wn.artifact"
    }

    class "_class_ceramic_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ceramic_cooktop.n.wn.artifact"
    }

    class "_class_cereal_boxnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cereal_box.n.wn.artifact"
    }

    class "_class_cleanvwncontactmake_clean" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clean.v.wn.contact..make_clean"
    }

    class "_class_closevwncontactagentive" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "close.v.wn.contact..agentive"
    }

    class "_class_closevwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "close.v.wn.contact..agentive.Patient"
    }

    class "_class_coffee_carafenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_carafe.n.wn.artifact"
    }

    class "_class_coffee_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_table.n.wn.artifact"
    }

    class "_class_coil_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coil_cooktop.n.wn.artifact"
    }

    class "_class_Topic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Topic"
    }

    class "_class_compartmentnwnartifactspace" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "compartment.n.wn.artifact..space"
    }

    class "_class_connectvwncontactlinkPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "connect.v.wn.contact..link.Patient"
    }

    class "_class_constructvwncreationphysical" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "construct.v.wn.creation..physical"
    }

    class "_class_containvwnstativeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "contain.v.wn.stative.Instrument"
    }

    class "_class_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cooktop.n.wn.artifact"
    }

    class "_class_countertopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "countertop.n.wn.artifact"
    }

    class "_class_covervwncontactagentiveInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cover.v.wn.contact..agentive.Instrument"
    }

    class "_class_crockerynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crockery.n.wn.artifact"
    }

    class "_class_cupnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cup.n.wn.artifact..container"
    }

    class "_class_cupboardnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cupboard.n.wn.artifact"
    }

    class "_class_cutlerynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cutlery.n.wn.artifact"
    }

    class "_class_cutvwncontactseparatePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut.v.wn.contact..separate.Patient"
    }

    class "_class_cutvwncontactseparate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut.v.wn.contact..separate"
    }

    class "_class_cutting_implementnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cutting_implement.n.wn.artifact"
    }

    class "_class_delivervwncontactbring" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deliver.v.wn.contact..bring"
    }

    class "_class_chairnwnartifactseat" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chair.n.wn.artifact..seat"
    }

    class "_class_partnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "part.n.wn.artifact"
    }

    class "_class_containernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "container.n.wn.artifact"
    }

    class "_class_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "furniture.n.wn.artifact"
    }

    class "_class_handlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "handle.n.wn.artifact"
    }

    class "_class_spadenwnartifacthand_shovel" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spade.n.wn.artifact..hand_shovel"
    }

    class "_class_dessert_forknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dessert_fork.n.wn.artifact"
    }

    class "_class_Destination" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Destination"
    }

    class "_class_dicevwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dice.v.wn.contact"
    }

    class "_class_dinner_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dinner_plate.n.wn.artifact"
    }

    class "_class_dishnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dish.n.wn.food"
    }

    class "_class_dishwashernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dishwasher.n.wn.artifact"
    }

    class "_class_dishwasher_tabnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dishwasher_tab.n.wn.artifact"
    }

    class "_class_dispensernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dispenser.n.wn.artifact"
    }

    class "_class_doornwnartifactmovable_barrier" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "door.n.wn.artifact..movable_barrier"
    }

    class "_class_drawernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drawer.n.wn.artifact"
    }

    class "_class_dropvwnmotionagentive" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drop.v.wn.motion..agentive"
    }

    class "_class_electric_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "electric_cooktop.n.wn.artifact"
    }

    class "_class_enclosevwncontactLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "enclose.v.wn.contact.Location"
    }

    class "_class_Experiencer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Experiencer"
    }

    class "_class_bringvwncontactfetch" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bring.v.wn.contact..fetch"
    }

    class "_class_flipvwncontactflip_over" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flip.v.wn.contact..flip_over"
    }

    class "_class_floornwnartifactsurface" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "floor.n.wn.artifact..surface"
    }

    class "_class_fluidnwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fluid.n.wn.substance"
    }

    class "_class_forknwnartifactcutlery" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fork.n.wn.artifact..cutlery"
    }

    class "_class_freezer_compartmentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freezer_compartment.n.wn.artifact"
    }

    class "_class_gas_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gas_cooktop.n.wn.artifact"
    }

    class "_class_glassnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "glass.n.wn.artifact..container"
    }

    class "_class_holdvwncontactgraspTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hold.v.wn.contact..grasp.Theme"
    }

    class "_class_holdvwncontactgrasp" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hold.v.wn.contact..grasp"
    }

    class "_class_hot_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hot_plate.n.wn.artifact"
    }

    class "_class_obstructvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "obstruct.v.wn.contact.Instrument"
    }

    class "_class_induction_cooktopnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "induction_cooktop.n.wn.artifact"
    }

    class "_class_insertvwncontactLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "insert.v.wn.contact.Location"
    }

    class "_class_Instrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Instrument"
    }

    class "_class_jarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jar.n.wn.artifact"
    }

    class "_class_kitchennwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen.n.wn.artifact"
    }

    class "_class_kitchen_cabinetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_cabinet.n.wn.artifact"
    }

    class "_class_kitchen_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_knife.n.wn.artifact"
    }

    class "_class_kitchen_unitnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_unit.n.wn.artifact"
    }

    class "_class_knifenwnartifacttool" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "knife.n.wn.artifact..tool"
    }

    class "_class_lidnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lid.n.wn.artifact"
    }

    class "_class_liftvwncontactraise" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lift.v.wn.contact..raise"
    }

    class "_class_attachvwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "attach.v.wn.contact..agentive.Patient"
    }

    class "_class_Location" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Location"
    }

    class "_class_milk_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk_bottle.n.wn.artifact"
    }

    class "_class_milk_cartonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk_carton.n.wn.artifact"
    }

    class "_class_mixvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mix.v.wn.contact"
    }

    class "_class_openvwncontactagentive" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "open.v.wn.contact..agentive"
    }

    class "_class_Source" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Source"
    }

    class "_class_ovennwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oven.n.wn.artifact"
    }

    class "_class_packnwnartifactpackage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pack.n.wn.artifact..package"
    }

    class "_class_pannwnartifactcooking_utensil" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pan.n.wn.artifact..cooking_utensil"
    }

    class "_class_pancakenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pancake.n.wn.food"
    }

    class "_class_pancake_mixnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pancake_mix.n.wn.food"
    }

    class "_class_pasta_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pasta_bowl.n.wn.artifact"
    }

    class "_class_Patient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Patient2"
    }

    class "_class_pepper_shakernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pepper_shaker.n.wn.artifact"
    }

    class "_class_pick_upvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick_up.v.wn.contact"
    }

    class "_class_putvwncontactplace" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "put.v.wn.contact..place"
    }

    class "_class_platenwnartifactflatware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plate.n.wn.artifact..flatware"
    }

    class "_class_potnwnartifactvessel" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pot.n.wn.artifact..vessel"
    }

    class "_class_pourvwnmotionagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pour.v.wn.motion..agentive.Theme"
    }

    class "_class_pourvwnmotionagentive" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pour.v.wn.motion..agentive"
    }

    class "_class_pullvwncontactmove" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pull.v.wn.contact..move"
    }

    class "_class_cleanvwncontactmake_cleanInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clean.v.wn.contact..make_clean.Instrument"
    }

    class "_class_pushvwnmotionmove" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "push.v.wn.motion..move"
    }

    class "_class_racknwnartifactsupport" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rack.n.wn.artifact..support"
    }

    class "_class_Recipient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Recipient"
    }

    class "_class_refrigeratornwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "refrigerator.n.wn.artifact"
    }

    class "_class_Product" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Product"
    }

    class "_class_roomnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "room.n.wn.artifact"
    }

    class "_class_salad_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_bowl.n.wn.artifact"
    }

    class "_class_saltshakernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saltshaker.n.wn.artifact"
    }

    class "_class_shakernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shaker.n.wn.artifact"
    }

    class "_class_shapevwncreationInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shape.v.wn.creation.Instrument"
    }

    class "_class_sinknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sink.n.wn.artifact"
    }

    class "_class_sitvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sit.v.wn.contact"
    }

    class "_class_slicevwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slice.v.wn.contact"
    }

    class "_class_sofanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sofa.n.wn.artifact"
    }

    class "_class_soup_potnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soup_pot.n.wn.artifact"
    }

    class "_class_spatulanwnartifactturner" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spatula.n.wn.artifact..turner"
    }

    class "_class_spoonnwnartifactcutlery" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spoon.n.wn.artifact..cutlery"
    }

    class "_class_stirvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stir.v.wn.contact"
    }

    class "_class_storevwnpossessionplaceLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "store.v.wn.possession..place.Location"
    }

    class "_class_stovenwnartifactkitchen_appliance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stove.n.wn.artifact..kitchen_appliance"
    }

    class "_class_sugar_dispensernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_dispenser.n.wn.artifact"
    }

    class "_class_tablenwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table.n.wn.artifact..furniture"
    }

    class "_class_tableforknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tablefork.n.wn.artifact"
    }

    class "_class_table_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_knife.n.wn.artifact"
    }

    class "_class_tablespoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tablespoon.n.wn.artifact"
    }

    class "_class_tablewarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tableware.n.wn.artifact"
    }

    class "_class_faucetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "faucet.n.wn.artifact"
    }

    class "_class_teaspoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "teaspoon.n.wn.artifact"
    }

    class "_class_coolvwnchangeforcedInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cool.v.wn.change..forced.Instrument"
    }

    class "_class_heatvwnchangeagentiveInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "heat.v.wn.change..agentive.Instrument"
    }

    class "_class_transportvwncontact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "transport.v.wn.contact"
    }

    class "_class_trashcannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "trashcan.n.wn.artifact"
    }

    class "_class_wallnwnartifactarchitecture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wall.n.wn.artifact..architecture"
    }

    class "_class_wardrobenwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wardrobe.n.wn.artifact..furniture"
    }

    class "_class_water_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_bottle.n.wn.artifact"
    }

    class "_class_water_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_glass.n.wn.artifact"
    }

    class "_class_wine_bottlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wine_bottle.n.wn.artifact"
    }

    class "_class_wineglassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wineglass.n.wn.artifact"
    }

    class "_class_Actor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Actor2"
    }

    class "_class_Asset" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Asset"
    }

    class "_class_Attribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Attribute"
    }

    class "_class_CanBeSatOn" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "CanBeSatOn"
    }

    class "_class_Cause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Cause"
    }

    class "_class_ClosingDisposition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ClosingDisposition"
    }

    class "_class_Connectivity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Connectivity"
    }

    class "_class_Containment" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Containment"
    }

    class "_class_Cuttability" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Cuttability"
    }

    class "_class_Extent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Extent"
    }

    class "_class_Linkage" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Linkage"
    }

    class "_class_Material" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Material"
    }

    class "_class_Predicate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Predicate"
    }

    class "_class_Stimulus" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Stimulus"
    }

    class "_class_Theme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Theme2"
    }

    class "_class_Time" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "Time"
    }

    class "_class_abstract" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "abstract"
    }

    class "_class_accommodatevwnstativeLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "accommodate.v.wn.stative.Location"
    }

    class "_class_acerolanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "acerola.n.wn.food"
    }

    class "_class_berrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "berry.n.wn.food"
    }

    class "_class_ackeenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ackee.n.wn.food"
    }

    class "_class_edible_fruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "edible_fruit.n.wn.food"
    }

    class "_class_acorn_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "acorn_squash.n.wn.food"
    }

    class "_class_winter_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winter_squash.n.wn.food"
    }

    class "_class_airing_cupboardnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "airing_cupboard.n.wn.artifact"
    }

    class "_class_alfalfa_sproutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "alfalfa_sprout.n.wn.food"
    }

    class "_class_sproutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sprout.n.wn.food"
    }

    class "_class_altarnwnartifactcommunion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "altar.n.wn.artifact..communion"
    }

    class "_class_amarellenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "amarelle.n.wn.food"
    }

    class "_class_sour_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_cherry.n.wn.food"
    }

    class "_class_amelanchiernwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "amelanchier.n.wn.plant"
    }

    class "_class_raisinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raisin.n.wn.food"
    }

    class "_class_anchorvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anchor.v.wn.contact.Patient"
    }

    class "_class_anchovy_pearnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anchovy_pear.n.wn.food"
    }

    class "_class_animalnwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "animal.n.wn.animal"
    }

    class "_class_animate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "animate"
    }

    class "_class_anjounwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "anjou.n.wn.food"
    }

    class "_class_pearnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pear.n.wn.food"
    }

    class "_class_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple.n.wn.food"
    }

    class "_class_pomenwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pome.n.wn.plant"
    }

    class "_class_corevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "core.v.wn.contact.Patient"
    }

    class "_class_decoratevwncreationTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "decorate.v.wn.creation.Theme"
    }

    class "_class_indentvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "indent.v.wn.contact.Patient"
    }

    class "_class_lumpvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lump.v.wn.contact.Patient"
    }

    class "_class_apple_tartnwnfoodpie" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple_tart.n.wn.food..pie"
    }

    class "_class_apple_tartnwnfoodtart" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apple_tart.n.wn.food..tart"
    }

    class "_class_apricotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "apricot.n.wn.food"
    }

    class "_class_areanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "area.n.wn.artifact"
    }

    class "_class_structurenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "structure.n.wn.artifact"
    }

    class "_class_covervwncontactagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cover.v.wn.contact..agentive.Theme"
    }

    class "_class_loadvwncontactplaceTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "load.v.wn.contact..place.Theme"
    }

    class "_class_movevwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "move.v.wn.motion.Theme"
    }

    class "_class_putvwncontactplaceTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "put.v.wn.contact..place.Theme"
    }

    class "_class_surroundvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "surround.v.wn.contact.Theme"
    }

    class "_class_argyllnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "argyll.n.wn.artifact"
    }

    class "_class_gravy_boatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gravy_boat.n.wn.artifact"
    }

    class "_class_armoirenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "armoire.n.wn.artifact"
    }

    class "_class_artichokenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "artichoke.n.wn.food"
    }

    class "_class_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vegetable.n.wn.food"
    }

    class "_class_artichoke_heartnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "artichoke_heart.n.wn.food"
    }

    class "_class_asparagusnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "asparagus.n.wn.food"
    }

    class "_class_avocadonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "avocado.n.wn.food"
    }

    class "_class_baby_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baby_bed.n.wn.artifact"
    }

    class "_class_bakevwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bake.v.wn.cooking.Patient"
    }

    class "_class_baked_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baked_potato.n.wn.food"
    }

    class "_class_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "potato.n.wn.food"
    }

    class "_class_baldwinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "baldwin.n.wn.food"
    }

    class "_class_eating_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eating_apple.n.wn.food"
    }

    class "_class_bamboo_shootnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bamboo_shoot.n.wn.food"
    }

    class "_class_banananwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "banana.n.wn.food"
    }

    class "_class_banquettenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "banquette.n.wn.artifact"
    }

    class "_class_benchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bench.n.wn.artifact"
    }

    class "_class_barnwnartifactcounter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bar.n.wn.artifact..counter"
    }

    class "_class_counternwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "counter.n.wn.artifact..table"
    }

    class "_class_barbados_gooseberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barbados_gooseberry.n.wn.food"
    }

    class "_class_barbecuevwncookingInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barbecue.v.wn.cooking.Instrument"
    }

    class "_class_barber_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barber_chair.n.wn.artifact"
    }

    class "_class_barricadevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "barricade.v.wn.contact.Theme"
    }

    class "_class_bartlettnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bartlett.n.wn.food"
    }

    class "_class_bassinetnwnartifactbaby_bed" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bassinet.n.wn.artifact..baby_bed"
    }

    class "_class_bath_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bath_chair.n.wn.artifact"
    }

    class "_class_wheelchairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wheelchair.n.wn.artifact"
    }

    class "_class_beach_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beach_plum.n.wn.food"
    }

    class "_class_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plum.n.wn.food"
    }

    class "_class_beakernwnartifactcup" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beaker.n.wn.artifact..cup"
    }

    class "_class_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bean.n.wn.food"
    }

    class "_class_legumenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "legume.n.wn.food"
    }

    class "_class_bean_sproutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bean_sprout.n.wn.food"
    }

    class "_class_bearvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bear.v.wn.contact.Theme"
    }

    class "_class_bednwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bed.n.wn.artifact..furniture"
    }

    class "_class_bedroom_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bedroom_furniture.n.wn.artifact"
    }

    class "_class_bedsteadnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bedstead.n.wn.artifact"
    }

    class "_class_restvwnbodyTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rest.v.wn.body.Theme"
    }

    class "_class_sleepvwnbodyTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sleep.v.wn.body.Theme"
    }

    class "_class_supportvwnstativeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "support.v.wn.stative.Instrument"
    }

    class "_class_beefsteak_tomatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beefsteak_tomato.n.wn.food"
    }

    class "_class_tomatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tomato.n.wn.food"
    }

    class "_class_beer_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beer_glass.n.wn.artifact"
    }

    class "_class_beer_mugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beer_mug.n.wn.artifact"
    }

    class "_class_mugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mug.n.wn.artifact"
    }

    class "_class_beetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beet.n.wn.food"
    }

    class "_class_root_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "root_vegetable.n.wn.food"
    }

    class "_class_beet_greennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beet_green.n.wn.food"
    }

    class "_class_greensnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "greens.n.wn.food"
    }

    class "_class_belgian_endivenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "belgian_endive.n.wn.food"
    }

    class "_class_chicory_escarolenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chicory_escarole.n.wn.food"
    }

    class "_class_bell_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bell_apple.n.wn.food"
    }

    class "_class_passion_fruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "passion_fruit.n.wn.food"
    }

    class "_class_bell_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bell_pepper.n.wn.food"
    }

    class "_class_sweet_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_pepper.n.wn.food"
    }

    class "_class_seatnwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seat.n.wn.artifact..furniture"
    }

    class "_class_changevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "change.v.wn.change.Patient"
    }

    class "_class_chipvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chip.v.wn.contact.Patient"
    }

    class "_class_installvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "install.v.wn.contact.Theme"
    }

    class "_class_separatevwncontactforcefulPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "separate.v.wn.contact..forceful.Patient"
    }

    class "_class_shapevwncreationPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shape.v.wn.creation.Patient"
    }

    class "_class_benchnwnlaw" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bench.n.wn.law"
    }

    class "_class_bermuda_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bermuda_onion.n.wn.food"
    }

    class "_class_green_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_onion.n.wn.food"
    }

    class "_class_squelchvwnmotionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squelch.v.wn.motion.Theme"
    }

    class "_class_berthnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "berth.n.wn.artifact"
    }

    class "_class_beveragenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "beverage.n.wn.food"
    }

    class "_class_bibb_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bibb_lettuce.n.wn.food"
    }

    class "_class_butterhead_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butterhead_lettuce.n.wn.food"
    }

    class "_class_bilberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bilberry.n.wn.food"
    }

    class "_class_blueberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blueberry.n.wn.food"
    }

    class "_class_bing_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bing_cherry.n.wn.food"
    }

    class "_class_sweet_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_cherry.n.wn.food"
    }

    class "_class_bitevwncontactbitingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bite.v.wn.contact..biting.Patient"
    }

    class "_class_bitter_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bitter_orange.n.wn.food"
    }

    class "_class_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "orange.n.wn.food"
    }

    class "_class_black_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "black_bean.n.wn.food"
    }

    class "_class_common_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "common_bean.n.wn.food"
    }

    class "_class_black_currantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "black_currant.n.wn.food"
    }

    class "_class_currantnwnfoodberry" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "currant.n.wn.food..berry"
    }

    class "_class_black_eyed_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "black_eyed_pea.n.wn.food"
    }

    class "_class_blackberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blackberry.n.wn.food"
    }

    class "_class_drupeletnwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drupelet.n.wn.plant"
    }

    class "_class_blackheartnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blackheart.n.wn.food"
    }

    class "_class_heart_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "heart_cherry.n.wn.food"
    }

    class "_class_blendvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "blend.v.wn.contact.Patient"
    }

    class "_class_body_part" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "body_part"
    }

    class "_class_body_partnwnanatomy" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "body_part.n.wn.anatomy"
    }

    class "_class_boilvwnchangecookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boil.v.wn.change..cooking.Patient"
    }

    class "_class_bok_choynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bok_choy.n.wn.food"
    }

    class "_class_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cabbage.n.wn.food"
    }

    class "_class_bookcasenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bookcase.n.wn.artifact"
    }

    class "_class_shelfnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shelf.n.wn.artifact"
    }

    class "_class_boothnwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "booth.n.wn.artifact..table"
    }

    class "_class_boscnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bosc.n.wn.food"
    }

    class "_class_boston_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boston_lettuce.n.wn.food"
    }

    class "_class_boston_rockernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boston_rocker.n.wn.artifact"
    }

    class "_class_rocking_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rocking_chair.n.wn.artifact"
    }

    class "_class_dishnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dish.n.wn.artifact..container"
    }

    class "_class_boxnwnartifactseat" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "box.n.wn.artifact..seat"
    }

    class "_class_box_seatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "box_seat.n.wn.artifact"
    }

    class "_class_boysenberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "boysenberry.n.wn.food"
    }

    class "_class_bramley_ZZ_s_seedlingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bramley_ZZ_s_seedling.n.wn.food"
    }

    class "_class_cooking_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cooking_apple.n.wn.food"
    }

    class "_class_brandy_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brandy_glass.n.wn.artifact"
    }

    class "_class_brandy_snifternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brandy_snifter.n.wn.artifact"
    }

    class "_class_breadfruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breadfruit.n.wn.food"
    }

    class "_class_breakvwnchangeinoperablePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "break.v.wn.change..inoperable.Patient"
    }

    class "_class_breakvwncontactdamagePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "break.v.wn.contact..damage.Patient"
    }

    class "_class_breakvwncontactdetachPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "break.v.wn.contact..detach.Patient"
    }

    class "_class_breakfast_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "breakfast_table.n.wn.artifact"
    }

    class "_class_broccolinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "broccoli.n.wn.food"
    }

    class "_class_cruciferous_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cruciferous_vegetable.n.wn.food"
    }

    class "_class_broccoli_rabenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "broccoli_rabe.n.wn.food"
    }

    class "_class_broom_closetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "broom_closet.n.wn.artifact"
    }

    class "_class_bruisevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bruise.v.wn.contact.Patient"
    }

    class "_class_brussels_sproutnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "brussels_sprout.n.wn.food"
    }

    class "_class_buffetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buffet.n.wn.artifact"
    }

    class "_class_built_in_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "built_in_bed.n.wn.artifact"
    }

    class "_class_bullock_ZZ_s_heartnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bullock_ZZ_s_heart.n.wn.food"
    }

    class "_class_custard_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "custard_apple.n.wn.food"
    }

    class "_class_bumpernwnartifactglass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bumper.n.wn.artifact..glass"
    }

    class "_class_bundlevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bundle.v.wn.contact.Patient"
    }

    class "_class_bunknwnartifactbed" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bunk.n.wn.artifact..bed"
    }

    class "_class_bunk_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "bunk_bed.n.wn.artifact"
    }

    class "_class_burn_downvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "burn_down.v.wn.change.Patient"
    }

    class "_class_butter_dishnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butter_dish.n.wn.artifact"
    }

    class "_class_butter_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butter_knife.n.wn.artifact"
    }

    class "_class_buttercrunchnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buttercrunch.n.wn.food"
    }

    class "_class_buttercup_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "buttercup_squash.n.wn.food"
    }

    class "_class_turban_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turban_squash.n.wn.food"
    }

    class "_class_garden_lettucenwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "garden_lettuce.n.wn.plant"
    }

    class "_class_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lettuce.n.wn.food"
    }

    class "_class_butternut_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "butternut_squash.n.wn.food"
    }

    class "_class_cabinetnwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cabinet.n.wn.artifact..furniture"
    }

    class "_class_fastenvwncontactaffixPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fasten.v.wn.contact..affix.Patient"
    }

    class "_class_joinvwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "join.v.wn.contact..agentive.Patient"
    }

    class "_class_lockvwncontactfastenPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lock.v.wn.contact..fasten.Patient"
    }

    class "_class_obstructvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "obstruct.v.wn.contact.Theme"
    }

    class "_class_openvwncontactagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "open.v.wn.contact..agentive.Theme"
    }

    class "_class_cajan_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cajan_pea.n.wn.food"
    }

    class "_class_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pea.n.wn.food"
    }

    class "_class_camp_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "camp_chair.n.wn.artifact"
    }

    class "_class_folding_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "folding_chair.n.wn.artifact"
    }

    class "_class_campstoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "campstool.n.wn.artifact"
    }

    class "_class_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stool.n.wn.artifact"
    }

    class "_class_canistelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "canistel.n.wn.food"
    }

    class "_class_cantaloupnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cantaloup.n.wn.food"
    }

    class "_class_honeydewnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "honeydew.n.wn.food"
    }

    class "_class_muskmelonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muskmelon.n.wn.food"
    }

    class "_class_captain_ZZ_s_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "captain_ZZ_s_chair.n.wn.artifact"
    }

    class "_class_capulinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "capulin.n.wn.food"
    }

    class "_class_cherrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cherry.n.wn.food"
    }

    class "_class_carambolanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carambola.n.wn.food"
    }

    class "_class_card_cataloguenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "card_catalogue.n.wn.artifact"
    }

    class "_class_filenwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "file.n.wn.artifact..furniture"
    }

    class "_class_card_tablenwnartifactcasino" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "card_table.n.wn.artifact..casino"
    }

    class "_class_card_tablenwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "card_table.n.wn.artifact..table"
    }

    class "_class_cardoonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cardoon.n.wn.food"
    }

    class "_class_carissa_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carissa_plum.n.wn.food"
    }

    class "_class_carrotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carrot.n.wn.food"
    }

    class "_class_gratevwncontactcookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grate.v.wn.contact..cooking.Patient"
    }

    class "_class_separatevwnmotiondividePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "separate.v.wn.motion..divide.Patient"
    }

    class "_class_carrycotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carrycot.n.wn.artifact"
    }

    class "_class_carving_forknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "carving_fork.n.wn.artifact"
    }

    class "_class_casabanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "casaba.n.wn.food"
    }

    class "_class_winter_melonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winter_melon.n.wn.food"
    }

    class "_class_case_knifenwnartifacttable_knife" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "case_knife.n.wn.artifact..table_knife"
    }

    class "_class_cash_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cash_bar.n.wn.artifact"
    }

    class "_class_cash_registernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cash_register.n.wn.artifact"
    }

    class "_class_cashboxnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cashbox.n.wn.artifact"
    }

    class "_class_strongboxnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "strongbox.n.wn.artifact"
    }

    class "_class_casserolenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "casserole.n.wn.artifact"
    }

    class "_class_cat_bowlnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cat_bowl.n.wn.food"
    }

    class "_class_pet_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pet_bowl.n.wn.artifact"
    }

    class "_class_catawbanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "catawba.n.wn.food"
    }

    class "_class_fox_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fox_grape.n.wn.food"
    }

    class "_class_cathedranwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cathedra.n.wn.artifact"
    }

    class "_class_gaddinwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gaddi.n.wn.artifact"
    }

    class "_class_thronenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "throne.n.wn.artifact"
    }

    class "_class_cauliflowernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cauliflower.n.wn.food"
    }

    class "_class_cayennenwnfoodchili_hot_pepper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cayenne.n.wn.food..chili_hot_pepper"
    }

    class "_class_chilinwnfoodhot_pepper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chili.n.wn.food..hot_pepper"
    }

    class "_class_celeriacnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "celeriac.n.wn.food"
    }

    class "_class_celerynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "celery.n.wn.food"
    }

    class "_class_cellnwnbiology" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cell.n.wn.biology"
    }

    class "_class_celtucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "celtuce.n.wn.food"
    }

    class "_class_cereal_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cereal_bowl.n.wn.artifact"
    }

    class "_class_cerimannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ceriman.n.wn.food"
    }

    class "_class_chair_of_statenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chair_of_state.n.wn.artifact"
    }

    class "_class_chaise_longuenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chaise_longue.n.wn.artifact"
    }

    class "_class_loungevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lounge.v.wn.contact.Theme"
    }

    class "_class_chalicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chalice.n.wn.artifact"
    }

    class "_class_changevwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "change.v.wn.change.Instrument"
    }

    class "_class_chardnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chard.n.wn.food"
    }

    class "_class_checkoutnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "checkout.n.wn.artifact"
    }

    class "_class_cherimoyanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cherimoya.n.wn.food"
    }

    class "_class_cherry_tomatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cherry_tomato.n.wn.food"
    }

    class "_class_chest_of_drawersnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chest_of_drawers.n.wn.artifact"
    }

    class "_class_chesterfieldnwnartifactdavenport_convertible_sofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chesterfield.n.wn.artifact..davenport_convertible_sofa"
    }

    class "_class_davenportnwnartifactconvertible_sofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "davenport.n.wn.artifact..convertible_sofa"
    }

    class "_class_chewvwnconsumptionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chew.v.wn.consumption.Patient"
    }

    class "_class_chickpeanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chickpea.n.wn.food"
    }

    class "_class_chicorynwnfoodleaf" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chicory.n.wn.food..leaf"
    }

    class "_class_salad_greennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_green.n.wn.food"
    }

    class "_class_chiffoniernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chiffonier.n.wn.artifact"
    }

    class "_class_hot_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hot_pepper.n.wn.food"
    }

    class "_class_china_cabinetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "china_cabinet.n.wn.artifact"
    }

    class "_class_chinawarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chinaware.n.wn.artifact"
    }

    class "_class_chinese_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chinese_cabbage.n.wn.food"
    }

    class "_class_chipotlenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chipotle.n.wn.food"
    }

    class "_class_jalapenonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jalapeno.n.wn.food"
    }

    class "_class_chopvwncontactdividePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chop.v.wn.contact..divide.Patient"
    }

    class "_class_chop_suey_greensnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chop_suey_greens.n.wn.food"
    }

    class "_class_chopsticknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chopstick.n.wn.artifact"
    }

    class "_class_sticknwnartifactimplement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stick.n.wn.artifact..implement"
    }

    class "_class_pickvwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick.v.wn.change.Instrument"
    }

    class "_class_chordatenwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "chordate.n.wn.animal"
    }

    class "_class_citrangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "citrange.n.wn.food"
    }

    class "_class_citrusnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "citrus.n.wn.food"
    }

    class "_class_citronnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "citron.n.wn.food"
    }

    class "_class_clementinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clementine.n.wn.food"
    }

    class "_class_mandarinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mandarin.n.wn.food"
    }

    class "_class_clingnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cling.n.wn.food"
    }

    class "_class_clothes_closetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "clothes_closet.n.wn.artifact"
    }

    class "_class_coat_closetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coat_closet.n.wn.artifact"
    }

    class "_class_cocoa_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocoa_plum.n.wn.food"
    }

    class "_class_cocottenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocotte.n.wn.artifact"
    }

    class "_class_cocozellenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cocozelle.n.wn.food"
    }

    class "_class_summer_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "summer_squash.n.wn.food"
    }

    class "_class_coffee_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_cup.n.wn.artifact"
    }

    class "_class_coffee_mugnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coffee_mug.n.wn.artifact"
    }

    class "_class_collapsevwnmotionbreak_downPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "collapse.v.wn.motion..break_down.Patient"
    }

    class "_class_collardsnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "collards.n.wn.food"
    }

    class "_class_kalenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kale.n.wn.food"
    }

    class "_class_comestible" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "comestible"
    }

    class "_class_foodnwnfoodnutrient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..nutrient"
    }

    class "_class_commissarynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "commissary.n.wn.artifact"
    }

    class "_class_snack_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snack_bar.n.wn.artifact"
    }

    class "_class_communication" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "communication"
    }

    class "_class_concord_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "concord_grape.n.wn.food"
    }

    class "_class_concrete" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "concrete"
    }

    class "_class_conference_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "conference_table.n.wn.artifact"
    }

    class "_class_console_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "console_table.n.wn.artifact"
    }

    class "_class_instrumentalitynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "instrumentality.n.wn.artifact"
    }

    class "_class_controlvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "control.v.wn.contact.Patient"
    }

    class "_class_convertiblenwnartifactsofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "convertible.n.wn.artifact..sofa"
    }

    class "_class_coquillenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "coquille.n.wn.artifact"
    }

    class "_class_cortlandnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cortland.n.wn.food"
    }

    class "_class_cosnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cos.n.wn.food"
    }

    class "_class_cotnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cot.n.wn.artifact"
    }

    class "_class_couchnwnartifactbed" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "couch.n.wn.artifact..bed"
    }

    class "_class_seatvwnstativeLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seat.v.wn.stative.Location"
    }

    class "_class_cox_ZZ_s_orange_pippinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cox_ZZ_s_orange_pippin.n.wn.food"
    }

    class "_class_pippinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pippin.n.wn.food"
    }

    class "_class_crab_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crab_apple.n.wn.food"
    }

    class "_class_cradlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cradle.n.wn.artifact"
    }

    class "_class_cranberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cranberry.n.wn.food"
    }

    class "_class_credenzanwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "credenza.n.wn.artifact"
    }

    class "_class_cressnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cress.n.wn.food"
    }

    class "_class_cribnwnartifactbaby_bed" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crib.n.wn.artifact..baby_bed"
    }

    class "_class_crisphead_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crisphead_lettuce.n.wn.food"
    }

    class "_class_crooknecknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crookneck.n.wn.food"
    }

    class "_class_yellow_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yellow_squash.n.wn.food"
    }

    class "_class_crushvwnchangefragmentationPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crush.v.wn.change..fragmentation.Patient"
    }

    class "_class_crystalnwnartifactglassware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "crystal.n.wn.artifact..glassware"
    }

    class "_class_glasswarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "glassware.n.wn.artifact"
    }

    class "_class_cubevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cube.v.wn.contact.Patient"
    }

    class "_class_cucumbernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cucumber.n.wn.food"
    }

    class "_class_peelvwncontactagentiveTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "peel.v.wn.contact..agentive.Theme"
    }

    class "_class_drinking_vesselnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drinking_vessel.n.wn.artifact"
    }

    class "_class_storage_spacenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "storage_space.n.wn.artifact"
    }

    class "_class_currantnwnfoodraisin" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "currant.n.wn.food..raisin"
    }

    class "_class_currency" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "currency"
    }

    class "_class_cushawnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cushaw.n.wn.food"
    }

    class "_class_cushionnwnartifactpadding" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cushion.n.wn.artifact..padding"
    }

    class "_class_paddingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "padding.n.wn.artifact"
    }

    class "_class_cutvwncontactincisionInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut.v.wn.contact..incision.Instrument"
    }

    class "_class_cut_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cut_glass.n.wn.artifact"
    }

    class "_class_cutternwnartifactcutting_implement" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cutter.n.wn.artifact..cutting_implement"
    }

    class "_class_skinvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skin.v.wn.contact.Theme"
    }

    class "_class_stabvwncontactInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stab.v.wn.contact.Instrument"
    }

    class "_class_toolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tool.n.wn.artifact"
    }

    class "_class_cutty_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "cutty_stool.n.wn.artifact"
    }

    class "_class_damsonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "damson.n.wn.food"
    }

    class "_class_dandelion_greennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dandelion_green.n.wn.food"
    }

    class "_class_datenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "date.n.wn.food"
    }

    class "_class_davenportnwnartifactdesk" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "davenport.n.wn.artifact..desk"
    }

    class "_class_desknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "desk.n.wn.artifact"
    }

    class "_class_daybednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "daybed.n.wn.artifact"
    }

    class "_class_deathbednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deathbed.n.wn.artifact"
    }

    class "_class_deck_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deck_chair.n.wn.artifact"
    }

    class "_class_decomposevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "decompose.v.wn.change.Patient"
    }

    class "_class_deliciousnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "delicious.n.wn.food"
    }

    class "_class_demitassenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "demitasse.n.wn.artifact"
    }

    class "_class_dessert_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dessert_plate.n.wn.artifact"
    }

    class "_class_dessert_spoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dessert_spoon.n.wn.artifact"
    }

    class "_class_deterioratevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "deteriorate.v.wn.change.Patient"
    }

    class "_class_devicenwnartifactinstrumentality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "device.n.wn.artifact..instrumentality"
    }

    class "_class_failvwnchangemalfunctionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fail.v.wn.change..malfunction.Patient"
    }

    class "_class_functionvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "function.v.wn.contact.Patient"
    }

    class "_class_handlevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "handle.v.wn.contact.Theme"
    }

    class "_class_manipulatevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "manipulate.v.wn.contact.Theme"
    }

    class "_class_operatevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "operate.v.wn.contact.Patient"
    }

    class "_class_runvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "run.v.wn.contact.Patient"
    }

    class "_class_transportvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "transport.v.wn.contact.Theme"
    }

    class "_class_dewberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dewberry.n.wn.food"
    }

    class "_class_dining_room_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dining_room_furniture.n.wn.artifact"
    }

    class "_class_dining_room_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dining_room_table.n.wn.artifact"
    }

    class "_class_dining_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dining_table.n.wn.artifact"
    }

    class "_class_dinner_servicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dinner_service.n.wn.artifact"
    }

    class "_class_servicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "service.n.wn.artifact"
    }

    class "_class_dinner_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dinner_table.n.wn.artifact"
    }

    class "_class_dinnerwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dinnerware.n.wn.artifact"
    }

    class "_class_stackvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stack.v.wn.contact.Theme"
    }

    class "_class_disintegratevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disintegrate.v.wn.change.Patient"
    }

    class "_class_dispositionActor" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Actor2"
    }

    class "_class_dispositionAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Agent"
    }

    class "_class_dispositionAsset" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Asset"
    }

    class "_class_dispositionAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Attribute"
    }

    class "_class_dispositionBeneficiary" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Beneficiary"
    }

    class "_class_dispositionCause" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Cause"
    }

    class "_class_dispositionDestination" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Destination"
    }

    class "_class_dispositionLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Location"
    }

    class "_class_dispositionExperiencer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Experiencer"
    }

    class "_class_dispositionExtent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Extent"
    }

    class "_class_dispositionInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Instrument"
    }

    class "_class_dispositionMaterial" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Material"
    }

    class "_class_dispositionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Patient2"
    }

    class "_class_dispositionPredicate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Predicate"
    }

    class "_class_dispositionProduct" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Product"
    }

    class "_class_dispositionRecipient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Recipient"
    }

    class "_class_dispositionSource" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Source"
    }

    class "_class_dispositionStimulus" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Stimulus"
    }

    class "_class_dispositionTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Theme2"
    }

    class "_class_dispositionTime" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Time"
    }

    class "_class_dispositionTopic" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "disposition.Topic"
    }

    class "_class_divannwnartifactsofa" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "divan.n.wn.artifact..sofa"
    }

    class "_class_dividevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "divide.v.wn.contact.Patient"
    }

    class "_class_dixie_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dixie_cup.n.wn.artifact"
    }

    class "_class_dog_bowlnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dog_bowl.n.wn.food"
    }

    class "_class_domestic_animalnwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "domestic_animal.n.wn.animal"
    }

    class "_class_double_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "double_bed.n.wn.artifact"
    }

    class "_class_drafting_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drafting_table.n.wn.artifact"
    }

    class "_class_worktablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "worktable.n.wn.artifact"
    }

    class "_class_dressernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dresser.n.wn.artifact"
    }

    class "_class_dressing_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dressing_table.n.wn.artifact"
    }

    class "_class_dried_apricotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dried_apricot.n.wn.food"
    }

    class "_class_dried_fruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "dried_fruit.n.wn.food"
    }

    class "_class_vesselnwnartifactcontainer" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vessel.n.wn.artifact..container"
    }

    class "_class_servevwnconsumptionconcreteTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "serve.v.wn.consumption..concrete.Theme"
    }

    class "_class_drop_leaf_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drop_leaf_table.n.wn.artifact"
    }

    class "_class_drupenwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "drupe.n.wn.plant"
    }

    class "_class_fruitnwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fruit.n.wn.plant"
    }

    class "_class_duriannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "durian.n.wn.food"
    }

    class "_class_eames_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eames_chair.n.wn.artifact"
    }

    class "_class_easy_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "easy_chair.n.wn.artifact"
    }

    class "_class_foldvwnchangefoldPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fold.v.wn.change..fold.Patient"
    }

    class "_class_eatvwnconsumptionfoodPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eat.v.wn.consumption..food.Patient"
    }

    class "_class_edge_toolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "edge_tool.n.wn.artifact"
    }

    class "_class_producenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "produce.n.wn.food"
    }

    class "_class_edible_pod_peanwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "edible_pod_pea.n.wn.plant"
    }

    class "_class_egg_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "egg_cup.n.wn.artifact"
    }

    class "_class_eggcupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eggcup.n.wn.artifact"
    }

    class "_class_eggplantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "eggplant.n.wn.food"
    }

    class "_class_solanaceous_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "solanaceous_vegetable.n.wn.food"
    }

    class "_class_elderberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "elderberry.n.wn.food"
    }

    class "_class_elongated" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "elongated"
    }

    class "_class_emperornwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "emperor.n.wn.food"
    }

    class "_class_vinifera_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vinifera_grape.n.wn.food"
    }

    class "_class_empirenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "empire.n.wn.food"
    }

    class "_class_entertainment_centernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "entertainment_center.n.wn.artifact"
    }

    class "_class_wall_unitnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wall_unit.n.wn.artifact"
    }

    class "_class_equipmentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "equipment.n.wn.artifact"
    }

    class "_class_performvwncreationTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "perform.v.wn.creation.Theme"
    }

    class "_class_etagerenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "etagere.n.wn.artifact"
    }

    class "_class_fabricnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fabric.n.wn.artifact"
    }

    class "_class_fauteuilnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fauteuil.n.wn.artifact"
    }

    class "_class_fava_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fava_bean.n.wn.food"
    }

    class "_class_shell_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shell_bean.n.wn.food"
    }

    class "_class_feijoanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "feijoa.n.wn.food"
    }

    class "_class_fennelnwnfoodvegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fennel.n.wn.food..vegetable"
    }

    class "_class_field_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "field_pea.n.wn.food"
    }

    class "_class_field_soybeannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "field_soybean.n.wn.food"
    }

    class "_class_soynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soy.n.wn.food"
    }

    class "_class_fignwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fig.n.wn.food"
    }

    class "_class_fighting_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fighting_chair.n.wn.artifact"
    }

    class "_class_office_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "office_furniture.n.wn.artifact"
    }

    class "_class_finger_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "finger_bowl.n.wn.artifact"
    }

    class "_class_fish_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fish_knife.n.wn.artifact"
    }

    class "_class_fitmentnwnfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fitment.n.wn.furniture"
    }

    class "_class_fixvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fix.v.wn.change.Patient"
    }

    class "_class_flageoletnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flageolet.n.wn.food"
    }

    class "_class_flame_tokaynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flame_tokay.n.wn.food"
    }

    class "_class_tokaynwnfoodvinifera_grape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tokay.n.wn.food..vinifera_grape"
    }

    class "_class_flat_benchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flat_bench.n.wn.artifact"
    }

    class "_class_flatwarenwnartifactsilverware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatware.n.wn.artifact..silverware"
    }

    class "_class_silverwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "silverware.n.wn.artifact"
    }

    class "_class_flatwarenwnartifacttableware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flatware.n.wn.artifact..tableware"
    }

    class "_class_floor_lampnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "floor_lamp.n.wn.artifact"
    }

    class "_class_lampnwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lamp.n.wn.artifact..furniture"
    }

    class "_class_flutenwnartifactwineglass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "flute.n.wn.artifact..wineglass"
    }

    class "_class_foodnwnfoodcookable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..cookable"
    }

    class "_class_foodnwnfoodservable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..servable"
    }

    class "_class_foodnwnfoodsolid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "food.n.wn.food..solid"
    }

    class "_class_pickvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick.v.wn.change.Patient"
    }

    class "_class_piercevwncontactagentivePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pierce.v.wn.contact..agentive.Patient"
    }

    class "_class_pokevwncontactpiercePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poke.v.wn.contact..pierce.Patient"
    }

    class "_class_supportvwnstativePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "support.v.wn.stative.Patient"
    }

    class "_class_turnvwnmotionflip_overTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turn.v.wn.motion..flip_over.Theme"
    }

    class "_class_foodstuffnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "foodstuff.n.wn.food"
    }

    class "_class_footstoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "footstool.n.wn.artifact"
    }

    class "_class_fordhooksnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fordhooks.n.wn.food"
    }

    class "_class_lima_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lima_bean.n.wn.food"
    }

    class "_class_four_posternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "four_poster.n.wn.artifact"
    }

    class "_class_slipskin_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slipskin_grape.n.wn.food"
    }

    class "_class_freestonenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "freestone.n.wn.food"
    }

    class "_class_french_friesnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_fries.n.wn.food"
    }

    class "_class_french_sorrelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "french_sorrel.n.wn.food"
    }

    class "_class_fresh_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fresh_bean.n.wn.food"
    }

    class "_class_frijolenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "frijole.n.wn.food"
    }

    class "_class_reproductive_structurenwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "reproductive_structure.n.wn.plant"
    }

    class "_class_gathervwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gather.v.wn.contact.Theme"
    }

    class "_class_pickvwnconsumptionPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick.v.wn.consumption.Patient"
    }

    class "_class_pickvwncontactgatherTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pick.v.wn.contact..gather.Theme"
    }

    class "_class_pullvwncontactforceTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pull.v.wn.contact..force.Theme"
    }

    class "_class_shrivelvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shrivel.v.wn.change.Patient"
    }

    class "_class_fryvwncookingPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "fry.v.wn.cooking.Patient"
    }

    class "_class_furnishingsnwnartifactinstrumentality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "furnishings.n.wn.artifact..instrumentality"
    }

    class "_class_game_equipmentnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "game_equipment.n.wn.artifact"
    }

    class "_class_gaming_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gaming_table.n.wn.artifact"
    }

    class "_class_garambullanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "garambulla.n.wn.food"
    }

    class "_class_garden_cressnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "garden_cress.n.wn.food"
    }

    class "_class_gateleg_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gateleg_table.n.wn.artifact"
    }

    class "_class_genipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "genip.n.wn.food"
    }

    class "_class_genipapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "genipap.n.wn.food"
    }

    class "_class_gherkinnwnfoodcucumber" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gherkin.n.wn.food..cucumber"
    }

    class "_class_glassnwnartifactglassware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "glass.n.wn.artifact..glassware"
    }

    class "_class_shattervwnchangeabout_patientPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shatter.v.wn.change..about_patient.Patient"
    }

    class "_class_globe_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "globe_pepper.n.wn.food"
    }

    class "_class_goa_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "goa_bean.n.wn.food"
    }

    class "_class_gobletnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "goblet.n.wn.artifact"
    }

    class "_class_gold_platenwnartifacttableware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gold_plate.n.wn.artifact..tableware"
    }

    class "_class_golden_deliciousnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "golden_delicious.n.wn.food"
    }

    class "_class_golden_gramnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "golden_gram.n.wn.food"
    }

    class "_class_gooseberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gooseberry.n.wn.food"
    }

    class "_class_grace_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grace_cup.n.wn.artifact"
    }

    class "_class_granadillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "granadilla.n.wn.food"
    }

    class "_class_granny_smithnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "granny_smith.n.wn.food"
    }

    class "_class_grapenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grape.n.wn.food"
    }

    class "_class_grapefruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grapefruit.n.wn.food"
    }

    class "_class_green_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_bean.n.wn.food"
    }

    class "_class_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "onion.n.wn.food"
    }

    class "_class_green_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_pea.n.wn.food"
    }

    class "_class_green_peppernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_pepper.n.wn.food"
    }

    class "_class_green_soybeannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "green_soybean.n.wn.food"
    }

    class "_class_greengagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "greengage.n.wn.food"
    }

    class "_class_grimes_goldennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "grimes_golden.n.wn.food"
    }

    class "_class_guavanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "guava.n.wn.food"
    }

    class "_class_gueridonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gueridon.n.wn.artifact"
    }

    class "_class_gumbonwnfoodvegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "gumbo.n.wn.food..vegetable"
    }

    class "_class_hallstandnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hallstand.n.wn.artifact"
    }

    class "_class_hammocknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hammock.n.wn.artifact"
    }

    class "_class_haricot_vertnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "haricot_vert.n.wn.food"
    }

    class "_class_head_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "head_cabbage.n.wn.food"
    }

    class "_class_high_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "high_table.n.wn.artifact"
    }

    class "_class_highball_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "highball_glass.n.wn.artifact"
    }

    class "_class_highboynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "highboy.n.wn.artifact"
    }

    class "_class_highchairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "highchair.n.wn.artifact"
    }

    class "_class_hitvwncontactstrikeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hit.v.wn.contact..strike.Instrument"
    }

    class "_class_hog_plumnwnfoodtropical" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hog_plum.n.wn.food..tropical"
    }

    class "_class_hog_plumnwnfoodunited_states" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hog_plum.n.wn.food..united_states"
    }

    class "_class_hollowwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hollowware.n.wn.artifact"
    }

    class "_class_home_friesnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "home_fries.n.wn.food"
    }

    class "_class_hospital_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hospital_bed.n.wn.artifact"
    }

    class "_class_single_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "single_bed.n.wn.artifact"
    }

    class "_class_peppernwnfoodsolanaceous_vegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pepper.n.wn.food..solanaceous_vegetable"
    }

    class "_class_hubbard_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "hubbard_squash.n.wn.food"
    }

    class "_class_huckleberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "huckleberry.n.wn.food"
    }

    class "_class_human" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "human"
    }

    class "_class_personnwnbody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "person.n.wn.body"
    }

    class "_class_iced_tea_spoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "iced_tea_spoon.n.wn.artifact"
    }

    class "_class_ilamanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ilama.n.wn.food"
    }

    class "_class_implementnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "implement.n.wn.artifact"
    }

    class "_class_repairvwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "repair.v.wn.change.Patient"
    }

    class "_class_int_control" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "int_control"
    }

    class "_class_invertebratenwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "invertebrate.n.wn.animal"
    }

    class "_class_jaboticabanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jaboticaba.n.wn.food"
    }

    class "_class_jacket_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jacket_potato.n.wn.food"
    }

    class "_class_jackfruitnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jackfruit.n.wn.food"
    }

    class "_class_jaffa_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jaffa_orange.n.wn.food"
    }

    class "_class_sweet_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_orange.n.wn.food"
    }

    class "_class_jerusalem_artichokenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jerusalem_artichoke.n.wn.food"
    }

    class "_class_tubernwnplantplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tuber.n.wn.plant..plant"
    }

    class "_class_jonathannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jonathan.n.wn.food"
    }

    class "_class_jujubenwnfoodedible_fruit" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "jujube.n.wn.food..edible_fruit"
    }

    class "_class_julienne_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "julienne_vegetable.n.wn.food"
    }

    class "_class_kai_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kai_apple.n.wn.food"
    }

    class "_class_kentucky_wondernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kentucky_wonder.n.wn.food"
    }

    class "_class_ketembillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ketembilla.n.wn.food"
    }

    class "_class_key_limenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "key_lime.n.wn.food"
    }

    class "_class_limenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lime.n.wn.food"
    }

    class "_class_kidney_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kidney_bean.n.wn.food"
    }

    class "_class_kitchen_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kitchen_table.n.wn.artifact"
    }

    class "_class_kiwinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kiwi.n.wn.food"
    }

    class "_class_kohlrabinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kohlrabi.n.wn.food"
    }

    class "_class_kumquatnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kumquat.n.wn.food"
    }

    class "_class_kylixnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "kylix.n.wn.artifact"
    }

    class "_class_lab_benchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lab_bench.n.wn.artifact"
    }

    class "_class_workbenchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "workbench.n.wn.artifact"
    }

    class "_class_ladder_backnwnartifactchair" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ladder_back.n.wn.artifact..chair"
    }

    class "_class_lamb_ZZ_s_quarternwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lamb_ZZ_s_quarter.n.wn.food"
    }

    class "_class_lightvwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "light.v.wn.change.Instrument"
    }

    class "_class_lightenvwnchangeInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lighten.v.wn.change.Instrument"
    }

    class "_class_lane_ZZ_s_prince_albertnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lane_ZZ_s_prince_albert.n.wn.food"
    }

    class "_class_lansehnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lanseh.n.wn.food"
    }

    class "_class_larvanwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "larva.n.wn.animal"
    }

    class "_class_lawn_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lawn_chair.n.wn.artifact"
    }

    class "_class_lawn_furniturenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lawn_furniture.n.wn.artifact"
    }

    class "_class_leaf_lettucenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "leaf_lettuce.n.wn.food"
    }

    class "_class_lecternnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lectern.n.wn.artifact"
    }

    class "_class_standnwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stand.n.wn.artifact..table"
    }

    class "_class_leeknwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "leek.n.wn.food"
    }

    class "_class_lemonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lemon.n.wn.food"
    }

    class "_class_lentilnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lentil.n.wn.food"
    }

    class "_class_lingonberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lingonberry.n.wn.food"
    }

    class "_class_liqueur_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "liqueur_glass.n.wn.artifact"
    }

    class "_class_litchinwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "litchi.n.wn.food"
    }

    class "_class_loganberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "loganberry.n.wn.food"
    }

    class "_class_longanberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "longanberry.n.wn.food"
    }

    class "_class_loquatnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "loquat.n.wn.food"
    }

    class "_class_love_seatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "love_seat.n.wn.artifact"
    }

    class "_class_lowboynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lowboy.n.wn.artifact"
    }

    class "_class_lower_berthnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "lower_berth.n.wn.artifact"
    }

    class "_class_machine" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "machine"
    }

    class "_class_machinenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "machine.n.wn.artifact"
    }

    class "_class_macounnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "macoun.n.wn.food"
    }

    class "_class_mcintoshnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mcintosh.n.wn.food"
    }

    class "_class_mameynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mamey.n.wn.food"
    }

    class "_class_mammalnwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mammal.n.wn.animal"
    }

    class "_class_mangel_wurzelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mangel_wurzel.n.wn.food"
    }

    class "_class_mangonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mango.n.wn.food"
    }

    class "_class_mangosteennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mangosteen.n.wn.food"
    }

    class "_class_marangnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marang.n.wn.food"
    }

    class "_class_marriage_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marriage_bed.n.wn.artifact"
    }

    class "_class_marrownwnfoodsummer_squash" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marrow.n.wn.food..summer_squash"
    }

    class "_class_marrowfat_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "marrowfat_pea.n.wn.food"
    }

    class "_class_mashed_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mashed_potato.n.wn.food"
    }

    class "_class_meat_counternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "meat_counter.n.wn.artifact"
    }

    class "_class_meat_safenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "meat_safe.n.wn.artifact"
    }

    class "_class_safenwnartifactcupboard" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "safe.n.wn.artifact..cupboard"
    }

    class "_class_medicine_chestnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "medicine_chest.n.wn.artifact"
    }

    class "_class_medlarnwnfoodcrabapple" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "medlar.n.wn.food..crabapple"
    }

    class "_class_medlarnwnfoodsouth_african" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "medlar.n.wn.food..south_african"
    }

    class "_class_melonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "melon.n.wn.food"
    }

    class "_class_melon_ballnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "melon_ball.n.wn.food"
    }

    class "_class_mercy_seatnwnartifactthrone" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mercy_seat.n.wn.artifact..throne"
    }

    class "_class_milk_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milk_bar.n.wn.artifact"
    }

    class "_class_milking_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "milking_stool.n.wn.artifact"
    }

    class "_class_mincevwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mince.v.wn.contact.Patient"
    }

    class "_class_minibarnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "minibar.n.wn.artifact"
    }

    class "_class_mixing_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mixing_bowl.n.wn.artifact"
    }

    class "_class_mombinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mombin.n.wn.food"
    }

    class "_class_morellonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "morello.n.wn.food"
    }

    class "_class_morris_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "morris_chair.n.wn.artifact"
    }

    class "_class_motorized_wheelchairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "motorized_wheelchair.n.wn.artifact"
    }

    class "_class_mulberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mulberry.n.wn.food"
    }

    class "_class_murphy_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "murphy_bed.n.wn.artifact"
    }

    class "_class_muscadinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muscadine.n.wn.food"
    }

    class "_class_muscatnwnfoodvinifera_grape" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "muscat.n.wn.food..vinifera_grape"
    }

    class "_class_mushroomnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mushroom.n.wn.food"
    }

    class "_class_music_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "music_stool.n.wn.artifact"
    }

    class "_class_musnudnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "musnud.n.wn.artifact"
    }

    class "_class_mustache_cupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mustache_cup.n.wn.artifact"
    }

    class "_class_mustardnwnfoodcruciferous_vegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "mustard.n.wn.food..cruciferous_vegetable"
    }

    class "_class_navel_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "navel_orange.n.wn.food"
    }

    class "_class_navy_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "navy_bean.n.wn.food"
    }

    class "_class_nectarinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nectarine.n.wn.food"
    }

    class "_class_nestnwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nest.n.wn.artifact..furniture"
    }

    class "_class_net_melonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "net_melon.n.wn.food"
    }

    class "_class_newtown_wondernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "newtown_wonder.n.wn.food"
    }

    class "_class_nonrigid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "nonrigid"
    }

    class "_class_northern_spynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "northern_spy.n.wn.food"
    }

    class "_class_notions_counternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "notions_counter.n.wn.artifact"
    }

    class "_class_objectnwnobject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "object.n.wn.object"
    }

    class "_class_operating_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "operating_table.n.wn.artifact"
    }

    class "_class_organization" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "organization"
    }

    class "_class_ottomannwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ottoman.n.wn.artifact"
    }

    class "_class_ovenwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ovenware.n.wn.artifact"
    }

    class "_class_oyster_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oyster_bar.n.wn.artifact"
    }

    class "_class_oyster_plantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "oyster_plant.n.wn.food"
    }

    class "_class_salsifynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salsify.n.wn.food"
    }

    class "_class_papawnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "papaw.n.wn.food"
    }

    class "_class_papayanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "papaya.n.wn.food"
    }

    class "_class_paper_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "paper_plate.n.wn.artifact"
    }

    class "_class_parfait_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parfait_glass.n.wn.artifact"
    }

    class "_class_park_benchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "park_bench.n.wn.artifact"
    }

    class "_class_parsnipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parsnip.n.wn.food"
    }

    class "_class_parsons_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "parsons_table.n.wn.artifact"
    }

    class "_class_pascal_celerynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pascal_celery.n.wn.food"
    }

    class "_class_pattypan_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pattypan_squash.n.wn.food"
    }

    class "_class_peachnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "peach.n.wn.food"
    }

    class "_class_peacock_thronenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "peacock_throne.n.wn.artifact"
    }

    class "_class_pearmainnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pearmain.n.wn.food"
    }

    class "_class_pedestal_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pedestal_table.n.wn.artifact"
    }

    class "_class_penalty_boxnwnice_hockey" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "penalty_box.n.wn.ice_hockey"
    }

    class "_class_perishablesnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "perishables.n.wn.artifact"
    }

    class "_class_perishablesnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "perishables.n.wn.food"
    }

    class "_class_persian_melonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "persian_melon.n.wn.food"
    }

    class "_class_persimmonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "persimmon.n.wn.food"
    }

    class "_class_petri_dishnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "petri_dish.n.wn.artifact"
    }

    class "_class_pewnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pew.n.wn.artifact"
    }

    class "_class_pieplantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pieplant.n.wn.food"
    }

    class "_class_pier_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pier_table.n.wn.artifact"
    }

    class "_class_pimentonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pimento.n.wn.food"
    }

    class "_class_pineapplenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pineapple.n.wn.food"
    }

    class "_class_pinto_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pinto_bean.n.wn.food"
    }

    class "_class_pitahayanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pitahaya.n.wn.food"
    }

    class "_class_place_settingnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "place_setting.n.wn.artifact"
    }

    class "_class_plank_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plank_bed.n.wn.artifact"
    }

    class "_class_plantnwnbotany" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plant.n.wn.botany"
    }

    class "_class_plant_organnwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plant_organ.n.wn.plant"
    }

    class "_class_plant_partnwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plant_part.n.wn.plant"
    }

    class "_class_plantainnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plantain.n.wn.food"
    }

    class "_class_platennwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "platen.n.wn.artifact..table"
    }

    class "_class_platform_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "platform_bed.n.wn.artifact"
    }

    class "_class_platform_rockernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "platform_rocker.n.wn.artifact"
    }

    class "_class_platternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "platter.n.wn.artifact"
    }

    class "_class_plum_tomatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plum_tomato.n.wn.food"
    }

    class "_class_plumcotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plumcot.n.wn.food"
    }

    class "_class_plural" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "plural"
    }

    class "_class_pointy" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pointy"
    }

    class "_class_pokevwncontactpierceInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poke.v.wn.contact..pierce.Instrument"
    }

    class "_class_pokevwncontactstirInstrument" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "poke.v.wn.contact..stir.Instrument"
    }

    class "_class_pomegranatenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pomegranate.n.wn.food"
    }

    class "_class_pomelonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pomelo.n.wn.food"
    }

    class "_class_pond_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pond_apple.n.wn.food"
    }

    class "_class_pool_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pool_table.n.wn.artifact"
    }

    class "_class_porringernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "porringer.n.wn.artifact"
    }

    class "_class_starchesnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "starches.n.wn.food"
    }

    class "_class_potherbnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "potherb.n.wn.food"
    }

    class "_class_preparevwnchangePatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prepare.v.wn.change.Patient"
    }

    class "_class_pressvwncontactcompressTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "press.v.wn.contact..compress.Theme"
    }

    class "_class_prickly_pearnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prickly_pear.n.wn.food"
    }

    class "_class_prie_dieunwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prie_dieu.n.wn.artifact"
    }

    class "_class_primanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prima.n.wn.food"
    }

    class "_class_rubvwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rub.v.wn.contact.Theme"
    }

    class "_class_wipevwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wipe.v.wn.contact.Theme"
    }

    class "_class_prunenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "prune.n.wn.food"
    }

    class "_class_pulasannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pulasan.n.wn.food"
    }

    class "_class_pulsenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pulse.n.wn.food"
    }

    class "_class_pumpkinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "pumpkin.n.wn.food"
    }

    class "_class_punch_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "punch_bowl.n.wn.artifact"
    }

    class "_class_purple_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "purple_onion.n.wn.food"
    }

    class "_class_spanish_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spanish_onion.n.wn.food"
    }

    class "_class_quandongnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "quandong.n.wn.food"
    }

    class "_class_quincenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "quince.n.wn.food"
    }

    class "_class_radicchionwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "radicchio.n.wn.food"
    }

    class "_class_radishnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "radish.n.wn.food"
    }

    class "_class_rambutannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rambutan.n.wn.food"
    }

    class "_class_ramekinnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ramekin.n.wn.artifact"
    }

    class "_class_raspberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raspberry.n.wn.food"
    }

    class "_class_raw_vegetablenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "raw_vegetable.n.wn.food"
    }

    class "_class_reading_lampnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "reading_lamp.n.wn.artifact"
    }

    class "_class_reception_desknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "reception_desk.n.wn.artifact"
    }

    class "_class_reclinernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "recliner.n.wn.artifact"
    }

    class "_class_red_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "red_cabbage.n.wn.food"
    }

    class "_class_red_currantnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "red_currant.n.wn.food"
    }

    class "_class_red_deliciousnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "red_delicious.n.wn.food"
    }

    class "_class_refectory_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "refectory_table.n.wn.artifact"
    }

    class "_class_regionnwnlocationspatial" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "region.n.wn.location..spatial"
    }

    class "_class_ribiernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ribier.n.wn.food"
    }

    class "_class_rome_beautynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rome_beauty.n.wn.food"
    }

    class "_class_rose_applenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rose_apple.n.wn.food"
    }

    class "_class_rummernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rummer.n.wn.artifact"
    }

    class "_class_runcible_spoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "runcible_spoon.n.wn.artifact"
    }

    class "_class_rutabaganwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "rutabaga.n.wn.food"
    }

    class "_class_turnipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turnip.n.wn.food"
    }

    class "_class_salad_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_bar.n.wn.artifact"
    }

    class "_class_salad_burnetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_burnet.n.wn.food"
    }

    class "_class_salad_forknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_fork.n.wn.artifact"
    }

    class "_class_salad_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "salad_plate.n.wn.artifact"
    }

    class "_class_sapodillanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sapodilla.n.wn.food"
    }

    class "_class_sapotenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sapote.n.wn.food"
    }

    class "_class_saskatoonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saskatoon.n.wn.food"
    }

    class "_class_satsumanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "satsuma.n.wn.food"
    }

    class "_class_saucernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "saucer.n.wn.artifact"
    }

    class "_class_savoy_cabbagenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "savoy_cabbage.n.wn.food"
    }

    class "_class_scalar" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scalar"
    }

    class "_class_scarlet_runnernwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scarlet_runner.n.wn.food"
    }

    class "_class_scavengernwnanimal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scavenger.n.wn.animal"
    }

    class "_class_schoonernwnartifactglass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "schooner.n.wn.artifact..glass"
    }

    class "_class_scorzoneranwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scorzonera.n.wn.food"
    }

    class "_class_scuppernongnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scuppernong.n.wn.food"
    }

    class "_class_scyphusnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "scyphus.n.wn.artifact"
    }

    class "_class_seckelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seckel.n.wn.food"
    }

    class "_class_secretarynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "secretary.n.wn.artifact"
    }

    class "_class_sectionalnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sectional.n.wn.artifact"
    }

    class "_class_seeded_raisinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seeded_raisin.n.wn.food"
    }

    class "_class_seedless_raisinnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seedless_raisin.n.wn.food"
    }

    class "_class_seidelnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "seidel.n.wn.artifact"
    }

    class "_class_separatevwncontactcomponentsPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "separate.v.wn.contact..components.Patient"
    }

    class "_class_servevwnconsumptionconcreteLocation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "serve.v.wn.consumption..concrete.Location"
    }

    class "_class_serving_dishnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "serving_dish.n.wn.artifact"
    }

    class "_class_setteenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "settee.n.wn.artifact"
    }

    class "_class_settlenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "settle.n.wn.artifact"
    }

    class "_class_shallotnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shallot.n.wn.food"
    }

    class "_class_supportnwnartifactdevice" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "support.n.wn.artifact..device"
    }

    class "_class_sheratonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sheraton.n.wn.artifact"
    }

    class "_class_shooflynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shoofly.n.wn.artifact"
    }

    class "_class_shot_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "shot_glass.n.wn.artifact"
    }

    class "_class_sickbednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sickbed.n.wn.artifact"
    }

    class "_class_sidenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "side.n.wn.artifact"
    }

    class "_class_sieva_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sieva_bean.n.wn.food"
    }

    class "_class_silver_platenwnartifacttableware" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "silver_plate.n.wn.artifact..tableware"
    }

    class "_class_skewervwncontactTheme" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "skewer.v.wn.contact.Theme"
    }

    class "_class_sleepernwnartifactfurniture" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sleeper.n.wn.artifact..furniture"
    }

    class "_class_sleigh_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sleigh_bed.n.wn.artifact"
    }

    class "_class_sloenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sloe.n.wn.food"
    }

    class "_class_slop_basinnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "slop_basin.n.wn.artifact"
    }

    class "_class_snap_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snap_bean.n.wn.food"
    }

    class "_class_snifternwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snifter.n.wn.artifact"
    }

    class "_class_snow_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snow_pea.n.wn.food"
    }

    class "_class_snow_peanwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "snow_pea.n.wn.plant"
    }

    class "_class_soda_fountainnwnartifactbar" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soda_fountain.n.wn.artifact..bar"
    }

    class "_class_solid" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "solid"
    }

    class "_class_sorbnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sorb.n.wn.food"
    }

    class "_class_sorrelnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sorrel.n.wn.food"
    }

    class "_class_soup_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soup_bowl.n.wn.artifact"
    }

    class "_class_soup_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soup_plate.n.wn.artifact"
    }

    class "_class_soupspoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soupspoon.n.wn.artifact"
    }

    class "_class_sour_gourdnwnfoodafrican" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_gourd.n.wn.food..african"
    }

    class "_class_sour_gourdnwnfoodaustralian" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sour_gourd.n.wn.food..australian"
    }

    class "_class_soursopnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "soursop.n.wn.food"
    }

    class "_class_spaghetti_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spaghetti_squash.n.wn.food"
    }

    class "_class_spinachnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "spinach.n.wn.food"
    }

    class "_class_split_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "split_pea.n.wn.food"
    }

    class "_class_squabnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squab.n.wn.artifact"
    }

    class "_class_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squash.n.wn.food"
    }

    class "_class_squashvwncontactPatient" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "squash.v.wn.contact.Patient"
    }

    class "_class_stalknwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stalk.n.wn.plant"
    }

    class "_class_staymannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stayman.n.wn.food"
    }

    class "_class_stayman_winesapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "stayman_winesap.n.wn.food"
    }

    class "_class_steak_knifenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "steak_knife.n.wn.artifact"
    }

    class "_class_steel_platenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "steel_plate.n.wn.artifact"
    }

    class "_class_step_stoolnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "step_stool.n.wn.artifact"
    }

    class "_class_straight_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "straight_chair.n.wn.artifact"
    }

    class "_class_strawberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "strawberry.n.wn.food"
    }

    class "_class_string_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "string_bean.n.wn.food"
    }

    class "_class_student_lampnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "student_lamp.n.wn.artifact"
    }

    class "_class_studio_couchnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "studio_couch.n.wn.artifact"
    }

    class "_class_substance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "substance"
    }

    class "_class_substancenwnsubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "substance.n.wn.substance"
    }

    class "_class_sugar_beetnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_beet.n.wn.food"
    }

    class "_class_sugar_bowlnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_bowl.n.wn.artifact"
    }

    class "_class_sugar_snap_peanwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_snap_pea.n.wn.food"
    }

    class "_class_sugar_snap_peanwnplant" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_snap_pea.n.wn.plant"
    }

    class "_class_sugar_spoonnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugar_spoon.n.wn.artifact"
    }

    class "_class_sugarberrynwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sugarberry.n.wn.food"
    }

    class "_class_sultananwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sultana.n.wn.food"
    }

    class "_class_supply_closetnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "supply_closet.n.wn.artifact"
    }

    class "_class_surfacenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "surface.n.wn.artifact"
    }

    class "_class_sushi_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sushi_bar.n.wn.artifact"
    }

    class "_class_sweet_calabashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_calabash.n.wn.food"
    }

    class "_class_sweet_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweet_potato.n.wn.food"
    }

    class "_class_sweetsopnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "sweetsop.n.wn.food"
    }

    class "_class_swivel_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "swivel_chair.n.wn.artifact"
    }

    class "_class_tabasconwnfoodhot_pepper" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tabasco.n.wn.food..hot_pepper"
    }

    class "_class_tablenwnartifactprepared" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table.n.wn.artifact..prepared"
    }

    class "_class_table_lampnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_lamp.n.wn.artifact"
    }

    class "_class_table_servicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_service.n.wn.artifact"
    }

    class "_class_table_tennis_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "table_tennis_table.n.wn.artifact"
    }

    class "_class_tablet_armed_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tablet_armed_chair.n.wn.artifact"
    }

    class "_class_warenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "ware.n.wn.artifact"
    }

    class "_class_taboretnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "taboret.n.wn.artifact"
    }

    class "_class_tamarindnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tamarind.n.wn.food"
    }

    class "_class_tangelonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tangelo.n.wn.food"
    }

    class "_class_tangerinenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tangerine.n.wn.food"
    }

    class "_class_taronwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "taro.n.wn.food"
    }

    class "_class_tea_makernwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_maker.n.wn.artifact"
    }

    class "_class_tea_servicenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_service.n.wn.artifact"
    }

    class "_class_tea_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tea_table.n.wn.artifact"
    }

    class "_class_teacupnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "teacup.n.wn.artifact"
    }

    class "_class_temple_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "temple_orange.n.wn.food"
    }

    class "_class_thompson_seedlessnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "thompson_seedless.n.wn.food"
    }

    class "_class_tilt_top_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tilt_top_table.n.wn.artifact"
    }

    class "_class_time" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "time"
    }

    class "_class_toasting_forknwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toasting_fork.n.wn.artifact"
    }

    class "_class_tobynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toby.n.wn.artifact"
    }

    class "_class_toilet_seatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "toilet_seat.n.wn.artifact"
    }

    class "_class_tomatillonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tomatillo.n.wn.food"
    }

    class "_class_trestle_tablenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "trestle_table.n.wn.artifact"
    }

    class "_class_tricliniumnwnartifacttable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "triclinium.n.wn.artifact..table"
    }

    class "_class_trufflenwnfoodvegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "truffle.n.wn.food..vegetable"
    }

    class "_class_trundle_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "trundle_bed.n.wn.artifact"
    }

    class "_class_tumblernwnartifactglass" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tumbler.n.wn.artifact..glass"
    }

    class "_class_tureennwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "tureen.n.wn.artifact"
    }

    class "_class_turnip_greensnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "turnip_greens.n.wn.food"
    }

    class "_class_twin_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "twin_bed.n.wn.artifact"
    }

    class "_class_upper_berthnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "upper_berth.n.wn.artifact"
    }

    class "_class_uruguay_potatonwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "uruguay_potato.n.wn.food"
    }

    class "_class_valencia_orangenwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "valencia_orange.n.wn.food"
    }

    class "_class_vehicle" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vehicle"
    }

    class "_class_vehiclenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vehicle.n.wn.artifact"
    }

    class "_class_venetian_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "venetian_glass.n.wn.artifact"
    }

    class "_class_vertical_filenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vertical_file.n.wn.artifact"
    }

    class "_class_victoria_plumnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "victoria_plum.n.wn.food"
    }

    class "_class_vidalia_onionnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "vidalia_onion.n.wn.food"
    }

    class "_class_washstandnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "washstand.n.wn.artifact"
    }

    class "_class_watch_glassnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "watch_glass.n.wn.artifact"
    }

    class "_class_water_bednwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "water_bed.n.wn.artifact"
    }

    class "_class_watercressnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "watercress.n.wn.food"
    }

    class "_class_watermelonnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "watermelon.n.wn.food"
    }

    class "_class_wax_beannwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wax_bean.n.wn.food"
    }

    class "_class_waynwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "way.n.wn.artifact"
    }

    class "_class_wet_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wet_bar.n.wn.artifact"
    }

    class "_class_white_turnipnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "white_turnip.n.wn.food"
    }

    class "_class_wild_spinachnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wild_spinach.n.wn.food"
    }

    class "_class_willowwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "willowware.n.wn.artifact"
    }

    class "_class_windfallnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "windfall.n.wn.food"
    }

    class "_class_window_seatnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "window_seat.n.wn.artifact"
    }

    class "_class_windsor_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "windsor_chair.n.wn.artifact"
    }

    class "_class_wine_barnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wine_bar.n.wn.artifact"
    }

    class "_class_winesapnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winesap.n.wn.food"
    }

    class "_class_wing_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wing_chair.n.wn.artifact"
    }

    class "_class_winter_cressnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winter_cress.n.wn.food"
    }

    class "_class_winter_crookneck_squashnwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "winter_crookneck_squash.n.wn.food"
    }

    class "_class_wintergreennwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wintergreen.n.wn.food"
    }

    class "_class_wooden_spoonnwnartifactspoon" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "wooden_spoon.n.wn.artifact..spoon"
    }

    class "_class_woodenwarenwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "woodenware.n.wn.artifact"
    }

    class "_class_writing_desknwnartifactdesk" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "writing_desk.n.wn.artifact..desk"
    }

    class "_class_yacht_chairnwnartifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yacht_chair.n.wn.artifact"
    }

    class "_class_yamnwnfoodroot_vegetable" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yam.n.wn.food..root_vegetable"
    }

    class "_class_yamnwnfoodsweet_potato" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "yam.n.wn.food..sweet_potato"
    }

    class "_class_zucchininwnfood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_SOMA_DFL_namespace>
    )
    {
        string rdf:conceptName = "zucchini.n.wn.food"
    }
}

class "_class_DUL_namespace" (
    prepend apiSchemas = ["RdfAPI"]
)
{
    string rdf:namespace = "http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#"
}

def "DUL"
{
    class "_class_Organism" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Organism"
        string rdf:definition = "A physical objects with biological characteristics, typically that organisms can self-reproduce."
    }

    class "_class_PhysicalAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAgent"
        string rdf:definition = "A PhysicalObject that is capable of self-representing (conceptualizing) a Description in order to plan an Action. A PhysicalAgent is a substrate for (actsFor) a Social Agent"
    }

    class "_class_BiologicalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "BiologicalObject"
    }

    class "_class_InformationObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "InformationObject"
        string rdf:definition = """In SOMA-compliant systems, the way to use InformationObjects to specify extra data about an individual entity is to employ the 'is about' and 'expresses' properties (or their inverses 'is reference of' and 'is expressed by') and to supply a persistent identifier for a realization of the InformationObject.

As a prototypical example, consider an individual called Action_XYZ, about which we have some data for which the meaning is described by Description_ABC. The data would be an individual InformationObject_DEF, and the following property assertions would hold:

InformationObject_DEF 'is about' Action_XYZ
InformationObject_DEF expresses Description_ABC


Usually, an individual InformationObject would be connected to (at least) an InformationRealization individual. For example, suppose there is such an InformationRealization individual, InformationRealization_123. Then, this individual will have data properties describing its format and persistent identifier

InformationRealization_123 hasPersistentIdentifier 'doi'
InformationRealization_123 hasDataFormat 'urdf'"""
    }

    class "_class_PhysicalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalObject"
        string rdf:definition = "Any Object that has a proper space region. The prototypical physical object has also an associated mass, but the nature of its mass can greatly vary based on the epistemological status of the object (scientifically measured, subjectively possible, imaginary)."
    }

    class "_class_SocialObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialObject"
        string rdf:definition = "Any Object that exists only within some communication Event, in which at least one PhysicalObject participates in. In other words, all objects that have been or are created in the process of social communication: for the sake of communication (InformationObject), for incorporating new individuals (SocialAgent, Place), for contextualizing or intepreting existing entities (Description, Concept), or for collecting existing entities (Collection). Being dependent on communication, all social objects need to be expressed by some information object (information objects are self-expressing)."
    }

    class "_class_DesignedArtifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "DesignedArtifact"
        string rdf:definition = "A PhysicalArtifact that is also described by a Design. This excludes simple recycling or refunctionalization of natural objects. Most common sense 'artifacts' can be included in this class: cars, lamps, houses, chips, etc."
    }

    class "_class_Organization" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Organization"
        string rdf:definition = "An internally structured, conventionally created SocialAgent, needing a specific Role and Agent that plays it, in order to act."
    }

    class "_class_NaturalPerson" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "NaturalPerson"
        string rdf:definition = "A person in the physical commonsense intuition: 'have you seen that person walking down the street?'"
    }

    class "_class_ObjectAggregate" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "ObjectAggregate"
        string rdf:definition = "An aggregate of distributed objects, members of a same Collection, e.g. the stars in a constellation, the parts of a car, the employees of a company, the entries from an encyclopedia, the concepts expressed in a speech, etc. It cannot be defined by means of an equivalence axiom, because it'd require the same Collection for all members, an axiom that cannot be expressed in OWL."
    }

    class "_class_Substance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Substance"
        string rdf:definition = "Any PhysicalBody that has not necessarily specified (designed) boundaries, e.g. a pile of trash, some sand, etc. In this sense, an artistic object made of trash or a dose of medicine in the form of a pill would be a FunctionalSubstance, and a DesignedArtifact, since its boundaries are specified by a Design; aleatoric objects that are outcomes of an artistic process might be still considered DesignedArtifact(s), and Substance(s)."
    }

    class "_class_Agent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Agent"
        string rdf:definition = """Generally, agents are goal-directed entities that are able to monitor their environment to select and perform efficient means-ends actions that are available in a given situation to achieve an intended goal. Agency, therefore, implies the ability to perceive and to change the environment of the agent. Crucially, it also entails intentionality to represent the goal-state in the future, equifinal variability to be able to achieve the intended goal-state with different actions in different contexts, and rationality of actions in relation to their goal to produce the most efficient action available (Source: https://en.wikipedia.org/wiki/Agency_(psychology)).

While we follow this definition, we do so loosely: We do not require the intentionality to be sourced by the agent. E.g., a running computer program (see Software instance) can be seen as an actor and therefore participate in Actions, e.g. some Communication Action, while its intentionality has been bestowed upon it from the agents who started the program or gave an input (e.g., via a mouse click) to achieve some goal."""
    }

    class "_class_Description" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Description"
        string rdf:definition = "A Description is a SocialObject that represents a conceptualization. It can be thought also as a 'descriptive context' that uses or defines concepts in order to create a view on a 'relational context' (cf. Situation) out of a set of data or observations. For example, a Plan is a Description of some actions to be executed by agents in a certain way, with certain parameters; a Diagnosis is a Description that provides an interpretation for a set of observed entities, etc. Descriptions 'define' or 'use' concepts, and can be 'satisfied' by situations."
    }

    class "_class_Concept" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Concept"
        string rdf:definition = "A Concept is a SocialObject, and isDefinedIn some Description; once defined, a Concept can be used in other Description(s). If a Concept isDefinedIn exactly one Description, see the LocalConcept class. The classifies relation relates Concept(s) to Entity(s) at some TimeInterval"
    }

    class "_class_Task" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Task"
        string rdf:definition = "An EventType that classifies an Action to be executed. For example, reaching a destination is a task that can be executed by performing certain actions, e.g. driving a car, buying a train ticket, etc. The actions to execute a task can also be organized according to a Plan that is not the same as the one that defines the task (if any). For example, reaching a destination could be defined by a plan to get on holidays, while the plan to execute the task can consist of putting some travels into a sequence."
    }

    class "_class_Role" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Role"
        string rdf:definition = "A Concept that classifies an Object"
    }

    class "_class_Entity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Entity"
        string rdf:definition = "Anything: real, possible, or imaginary, which some modeller wants to talk about for some purpose."
    }

    class "_class_Event" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Event"
        string rdf:definition = "Any physical, social, or mental process, event, or state. More theoretically, events can be classified in different ways, possibly based on 'aspect' (e.g. stative, continuous, accomplishement, achievement, etc.), on 'agentivity' (e.g. intentional, natural, etc.), or on 'typical participants' (e.g. human, physical, abstract, food, etc.). Here no special direction is taken, and the following explains why: events are related to observable situations, and they can have different views at a same time. If a position has to be suggested here anyway, the participant-based classification of events seems the most stable and appropriate for many modelling problems. (1) Alternative aspectual views Consider a same event 'rock erosion in the Sinni valley': it can be conceptualized as an accomplishment (what has brought a certain state to occur), as an achievement (the state resulting from a previous accomplishment), as a punctual event (if we collapse the time interval of the erosion into a time point), or as a transition (something that has changed from a state to a different one). In the erosion case, we could therefore have good motivations to shift from one aspect to another: a) causation focus, b) effectual focus, c) historical condensation, d) transition (causality). The different views refer to the same event, but are still different: how to live with this seeming paradox? A typical solution e.g. in linguistics (cf. Levin's aspectual classes) and in DOLCE Full (cf. WonderWeb D18 axiomatization) is to classify events based on aspectual differences. But this solution would create different identities for a same event, where the difference is only based on the modeller's attitude. An alternative solution is suggested here, and exploits the notion of (observable) Situation; a Situation is a view, consistent with a Description, which can be observed of a set of entities. It can also be seen as a 'relational context' created by an observer on the basis of a 'frame'. Therefore, a Situation allows to create a context where each particular view can have a proper identity, while the Event preserves its own identity. For example, ErosionAsAccomplishment is a Situation where rock erosion is observed as a process leading to a certain achievement: the conditions (roles, parameters) that suggest such view are stated in a Description, which acts as a 'theory of accomplishments'. Similarly, ErosionAsTransition is a Situation where rock erosion is observed as an event that has changed a state to another: the conditions for such interpretation are stated in a different Description, which acts as a 'theory of state transitions'. Consider that in no case the actual event is changed or enriched in parts by the aspectual view. (2) Alternative intentionality views Similarly to aspectual views, several intentionality views can be provided for a same Event. For example, one can investigate if an avalanche has been caused by immediate natural forces, or if there is any hint of an intentional effort to activate those natural forces. Also in this case, the Event as such has not different identities, while the causal analysis generates situations with different identities, according to what Description is taken for interpreting the Event. On the other hand, if the possible actions of an Agent causing the starting of an avalanche are taken as parts of the Event, then this makes its identity change, because we are adding a part to it. Therefore, if intentionality is a criterion to classify events or not, this depends on if an ontology designer wants to consider causality as a relevant dimension for events' identity. (3) Alternative participant views A slightly different case is when we consider the basic participants to an Event. In this case, the identity of the Event is affected by the participating objects, because it depends on them. For example, if snow, mountain slopes, wind, waves, etc. are considered as an avalanche basic participants, or if we also want to add water, human agents, etc., that makes the identity of an avalanche change. Anyway, this approach to event classification is based on the designer's choices, and more accurately mirrors lexical or commonsense classifications (see. e.g. WordNet 'supersenses' for verb synsets). Ultimately, this discussion has no end, because realists will keep defending the idea that events in reality are not changed by the way we describe them, while constructivists will keep defending the idea that, whatever 'true reality' is about, it can't be modelled without the theoretical burden of how we observe and describe it. Both positions are in principle valid, but, if taken too radically, they focus on issues that are only partly relevant to the aim of computational ontologies, which assist domain experts in representing a certain portion of reality according to their own assumptions and requirements. For this reason, in this ontology version of DOLCE, both events and situations are allowed, together with descriptions (the reason for the inclusion of the DS framewrok in DOLCE), in order to encode the modelling needs, independently from the position (if any) chosen by the model designer."
    }

    class "_class_Transition" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Transition"
        string rdf:definition = "A transition is a Situation that creates a context for three TimeInterval(s), two additional different Situation(s), one Event, one Process, and at least one Object: the Event is observed as the cause for the transition, one Situation is the state before the transition, the second Situation is the state after the transition, the Process is the invariance under some different transitions (including the one represented here), in which at least one Object is situated. Finally, the time intervals position the situations and the transitional event in time. This class of situations partly encodes the ontology underlying typical engineering algebras for processes, e.g. Petri Nets. A full representation of the transition ontology is outside the expressivity of OWL, because we would need qualified cardinality restrictions, coreference, property equivalence, and property composition."
    }

    class "_class_EventType" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "EventType"
        string rdf:definition = "A Concept that classifies an Event . An event type describes how an Event should be interpreted, executed, expected, seen, etc., according to the Description that the EventType isDefinedIn (or used in)"
    }

    class "_class_Parameter" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Parameter"
        string rdf:definition = "A Concept that classifies a Region; the difference between a Region and a Parameter is that regions represent sets of observable values, e.g. the height of a given building, while parameters represent constraints or selections on observable values, e.g. 'VeryHigh'. Therefore, parameters can also be used to constrain regions, e.g. VeryHigh on a subset of values of the Region Height applied to buildings, or to add an external selection criterion , such as measurement units, to regions, e.g. Meter on a subset of values from the Region Length applied to the Region Length applied to roads."
    }

    class "_class_Quality" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Quality"
        string rdf:definition = "Any aspect of an Entity (but not a part of it), which cannot exist without that Entity. For example, the way the surface of a specific PhysicalObject looks like, or the specific light of a place at a certain time, are examples of Quality, while the encoding of a Quality into e.g. a PhysicalAttribute should be modeled as a Region. From the design viewpoint, the Quality-Region distinction is useful only when individual aspects of an Entity are considered in a domain of discourse. For example, in an automotive context, it would be irrelevant to consider the aspects of car windows for a specific car, unless the factory wants to check a specific window against design parameters (anomaly detection). On the other hand, in an antiques context, the individual aspects for a specific piece of furniture are a major focus of attention, and may constitute the actual added value, because the design parameters for old furniture are often not fixed, and may not be viewed as 'anomalies'."
    }

    class "_class_Collection" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Collection"
        string rdf:definition = 'Any container for entities that share one or more common properties. E.g. "stone objects", "the nurses", "the Louvre Aegyptian collection", all the elections for the Italian President of the Republic. A collection is not a logical class: a collection is a first-order entity, while a class is second-order. A collection is neither an aggregate of its member entities (see e.g. ObjectAggregate class).'
    }

    class "_class_Action" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Action"
        string rdf:definition = "The EASE view: an Action is an Event in which an Agent executes some Task, typically defined by a Workflow, towards the achievement of some Goal."
    }

    class "_class_Region" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Region"
        string rdf:definition = "Any region in a dimensional space (a dimensional space is a maximal Region), which can be used as a value for a quality of an Entity . For example, TimeInterval, SpaceRegion, PhysicalAttribute, Amount, SocialAttribute are all subclasses of Region. Regions are not data values in the ordinary knowledge representation sense; in order to get patterns for modelling data, see the properties: representsDataValue and hasDataValue"
    }

    class "_class_Object" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Object"
        string rdf:definition = "Any physical, social, or mental object, or a substance. Following DOLCE Full, objects are always participating in some event (at least their own life), and are spatially located."
    }

    class "_class_Workflow" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Workflow"
        string rdf:definition = "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed, usually supporting the work of an Organization"
    }

    class "_class_Goal" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Goal"
        string rdf:definition = "The Description of a Situation that is desired by an Agent, and usually associated to a Plan that describes how to actually achieve it"
    }

    class "_class_Situation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Situation"
        string rdf:definition = "A view, consistent with ('satisfying') a Description, on a set of entities. It can also be seen as a 'relational context' created by an observer on the basis of a 'frame' (i.e. a Description). For example, a PlanExecution is a context including some actions executed by agents according to certain parameters and expected tasks to be achieved from a Plan; a DiagnosedSituation is a context of observed entities that is interpreted on the basis of a Diagnosis, etc. Situation is also able to represent reified n-ary relations, where isSettingFor is the top-level relation for all binary projections of the n-ary relation. If used in a transformation pattern for n-ary relations, the designer should take care of adding (some or all) OWL2 keys, corresponding to binary projections of the n-ary, to a subclass of Situation. Otherwise the 'identification constraint' (Calvanese et al., IJCAI 2001) might be violated."
    }

    class "_class_Process" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Process"
        string rdf:definition = "This is a placeholder for events that are considered in their evolution, or anyway not strictly dependent on agents, tasks, and plans. See Event class for some thoughts on classifying events. See also 'Transition'."
    }

    class "_class_SpaceRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SpaceRegion"
        string rdf:definition = "Any Region in a dimensional space that is used to localize an Entity ; i.e., it is not used to represent some characteristic (e.g. it excludes time intervals, colors, size values, judgment values, etc.). Differently from a Place , a space region has a specific dimensional space."
    }

    class "_class_Relation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Relation"
        string rdf:definition = "Relations are descriptions that can be considered as the counterpart of formal relations (that are included in the FormalEntity class). For example, 'givingGrantToInstitution(x,y,z)' with three argument types: Provider(x),Grant(y),Recipient(z), can have a Relation counterpart: 'GivingGrantToInstitution', which defines three Concept instances: Provider,Grant,Recipient. Since social objects are not formal entities, Relation includes here any 'relation-like' entity in common sense, including social relations."
    }

    class "_class_PhysicalArtifact" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalArtifact"
        string rdf:definition = "Any PhysicalObject that isDescribedBy a Plan . This axiomatization is weak, but allows to talk of artifacts in a very general sense, i.e. including recycled objects, objects with an intentional functional change, natural objects that are given a certain function, even though they are not modified or structurally designed, etc. PhysicalArtifact(s) are not considered disjoint from PhysicalBody(s), in order to allow a dual classification when needed. E.g., FunctionalSubstance(s) are included here as well. Immaterial (non-physical) artifacts (e.g. texts, ideas, cultural movements, corporations, communities, etc. can be modelled as social objects (see SocialObject), which are all 'artifactual' in the weak sense assumed here."
    }

    class "_class_PhysicalPlace" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalPlace"
        string rdf:definition = "A physical object that is inherently located; for example, a water area."
    }

    class "_class_Design" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Design"
        string rdf:definition = "A Description of the Situation, in terms of structure and function, held by an Entity for some reason. A design is usually accompanied by the rationales behind the construction of the designed Entity (i.e. of the reasons why a design is claimed to be as such). For example, the actual design (a Situation) of a car or of a law is based on both the specification (a Description) of the structure, and the rationales used to construct cars or laws. While designs typically describe entities to be constructed, they can also be used to describe 'refunctionalized' entities, or to hypothesize unknown functions. For example, a cradle can be refunctionalized as a flowerpot based on a certain home design."
    }

    class "_class_Plan" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Plan"
        string rdf:definition = "A Description having an explicit Goal, to be achieved by executing the plan"
    }

    class "_class_InformationRealization" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "InformationRealization"
        string rdf:definition = """In SOMA-compliant systems, the way to use InformationObjects to specify extra data about an individual entity is to employ the 'is about' and 'expresses' properties (or their inverses 'is reference of' and 'is expressed by') and to supply a persistent identifier for a realization of the InformationObject.

As a prototypical example, consider an individual called Action_XYZ, about which we have some data for which the meaning is described by Description_ABC. The data would be an individual InformationObject_DEF, and the following property assertions would hold:

InformationObject_DEF 'is about' Action_XYZ
InformationObject_DEF expresses Description_ABC


Usually, an individual InformationObject would be connected to (at least) an InformationRealization individual. For example, suppose there is such an InformationRealization individual, InformationRealization_123. Then, this individual will have data properties describing its format and persistent identifier

InformationRealization_123 hasPersistentIdentifier 'doi'
InformationRealization_123 hasDataFormat 'urdf'"""
    }

    class "_class_TimeInterval" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "TimeInterval"
        string rdf:definition = "Any Region in a dimensional space that aims at representing time."
    }

    class "_class_PhysicalAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalAttribute"
        string rdf:definition = "Physical value of a physical object, e.g. density, color, etc."
    }

    class "_class_Diagnosis" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Diagnosis"
        string rdf:definition = "A Description of the Situation of a system, usually applied in order to control a normal behaviour, or to explain a notable behavior (e.g. a functional breakdown)."
    }

    class "_class_Configuration" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Configuration"
        string rdf:definition = "A collection whose members are 'unified', i.e. organized according to a certain schema that can be represented by a Description. Typically, a configuration is the collection that emerges out of a composed entity: an industrial artifact, a plan, a discourse, etc. E.g. a physical book has a configuration provided by the part-whole schema that holds together its cover, pages, ink. That schema, based on the individual relations between the book and its parts, can be represented in a reified way by means of a (structural) description, which is said to 'unify' the book configuration."
    }

    class "_class_PhysicalBody" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PhysicalBody"
        string rdf:definition = "Physical bodies are PhysicalObject(s), for which we tend to neutralize any possible artifactual character. They can have several granularity levels: geological, chemical, physical, biological, etc."
    }

    class "_class_FormalEntity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "FormalEntity"
        string rdf:definition = "Entities that are formally defined and are considered independent from the social context in which they are used. They cannot be localized in space or time. Also called 'Platonic entities'. Mathematical and logical entities are included in this class: sets, categories, tuples, costants, variables, etc. Abstract formal entities are distinguished from information objects, which are supposed to be part of a social context, and are localized in space and time, therefore being (social) objects. For example, the class 'Quark' is an abstract formal entity from the purely set-theoretical perspective, but it is an InformationObject from the viewpoint of ontology design, when e.g. implemented in a logical language like OWL. Abstract formal entities are also distinguished from Concept(s), Collection(s), and Description(s), which are part of a social context, therefore being SocialObject(s) as well. For example, the class 'Quark' is an abstract FormalEntity from the purely set-theoretical perspective, but it is a Concept within history of science and cultural dynamics. These distinctions allow to represent two different notions of 'semantics': the first one is abstract and formal ('formal semantics'), and formallyInterprets symbols that are about entities whatsoever; for example, the term 'Quark' isAbout the Collection of all quarks, and that Collection isFormalGroundingFor the abstract class 'Quark' (in the extensional sense). The second notion is social, localized in space-time ('social semantics'), and can be used to interpret entities in the intensional sense. For example, the Collection of all quarks isCoveredBy the Concept 'Quark', which is also expressed by the term 'Quark'."
    }

    class "_class_SocialRelation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialRelation"
        string rdf:definition = "Any social relationship"
    }

    class "_class_SocialObjectAttribute" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialObjectAttribute"
        string rdf:definition = "Any Region in a dimensional space that is used to represent some characteristic of a SocialObject, e.g. judgment values, social scalars, statistical attributes over a collection of entities, etc."
    }

    class "_class_Theory" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Theory"
        string rdf:definition = "A Theory is a Description that represents a set of assumptions for describing something, usually general. Scientific, philosophical, and commonsense theories can be included here. This class can also be used to act as 'naturalized reifications' of logical theories (of course, they will be necessarily incomplete in this case, because second-order entities are represented as first-order ones)."
    }

    class "_class_Set" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Set"
    }

    class "_class_SocialAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialAgent"
        string rdf:definition = "Any individual whose existence is granted simply by its social communicability and capability of action (through some PhysicalAgent)."
    }

    class "_class_Abstract" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Abstract"
        string rdf:definition = "Any Entity that cannot be located in space-time. E.g. mathematical entities: formal semantics elements, regions within dimensional spaces, etc."
    }

    class "_class_Amount" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Amount"
        string rdf:definition = "A quantity, independently from how it is measured, computed, etc."
    }

    class "_class_ChemicalObject" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "ChemicalObject"
    }

    class "_class_Classification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Classification"
        string rdf:definition = "A special kind of Situation that allows to include time indexing for the classifies relation in situations. For example, if a Situation s 'my old cradle is used in these days as a flower pot' isSettingFor the entity 'my old cradle' and the TimeIntervals '8June2007' and '10June2007', and we know that s satisfies a functional Description for aesthetic objects, which defines the Concepts 'flower pot' and 'flower', then we also need to know what concept classifies 'my old cradle' at what time. In order to solve this issue, we need to create a sub-situation s' for the classification time: 'my old cradle is a flower pot in 8June2007'. Such sub-situation s' isPartOf s."
    }

    class "_class_TimeIndexedRelation" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "TimeIndexedRelation"
        string rdf:definition = "A Situation that includes a time indexing in its setting, so allowing to order any binary relation (property) with time."
    }

    class "_class_Collective" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Collective"
        string rdf:definition = 'A Collection whose members are agents, e.g. "the nurses", "the Italian rockabilly fans". Collectives, facon de parler, can act as agents, although they are not assumed here to be agents (they are even disjoint from the class SocialAgent). This is represented by admitting collectives in the range of the relations having Agent in their domain or range.'
    }

    class "_class_CollectiveAgent" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "CollectiveAgent"
        string rdf:definition = "A SocialAgent that is actedBy agents that are (and act as) members of a Collective. A collective agent can have roles that are also roles of those agents. For example, in sociology, a 'group action' is the situation in which a number of people (that result to be members of a collective) in a given area behave in a coordinated way in order to achieve a (often common) goal. The Agent in such a Situation is not single, but a CollectiveAgent (a Group). This can be generalized to the notion of social movement, which assumes a large Community or even the entire Society as agents. The difference between a CollectiveAgent and an Organization is that a Description that introduces a CollectiveAgent is also one that unifies the corresponding Collective. In practice, this difference makes collective agents 'less stable' than organizations, because they have a dedicated, publicly recognizable Description that is conceived to introduce them."
    }

    class "_class_Community" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Community"
    }

    class "_class_Contract" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Contract"
        string rdf:definition = "(The content of) an agreement between at least two agents that play a Party Role, about some contract object (a Task to be executed)."
    }

    class "_class_DesignedSubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "DesignedSubstance"
    }

    class "_class_FunctionalSubstance" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "FunctionalSubstance"
    }

    class "_class_Group" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Group"
        string rdf:definition = "A CollectiveAgent whose acting agents conceptualize a same SocialRelation ."
    }

    class "_class_InformationEntity" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "InformationEntity"
        string rdf:definition = "A piece of information, be it concretely realized or not. It is a catchall class, intended to bypass the ambiguities of many data or text that could denote either a an expression or a concrete realization of that expression. In a semiotic model, there is no special reason to distinguish between them, however we may want to distinguish between a pure information content (e.g. the 3rd Gymnopedie by Satie), and its possible concrete realizations as a music sheet, a piano execution, the reproduction of the execution, its publishing as a record, etc.)."
    }

    class "_class_LocalConcept" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "LocalConcept"
        string rdf:definition = "A Concept that isDefinedIn exactly 1 Description. For example, the Concept 'coffee' in a 'preparesCoffee' relation can be defined in that relation, and for all other Description(s) that use it, the isConceptUsedIn property should be applied. Notice therefore that not necessarily all Concept(s) isDefinedIn exactly 1 Description."
    }

    class "_class_Method" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Method"
        string rdf:definition = "A method is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans."
    }

    class "_class_Narrative" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Narrative"
    }

    class "_class_Person" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Person"
        string rdf:definition = "Persons in commonsense intuition, which does not apparently distinguish between either natural or social persons."
    }

    class "_class_Norm" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Norm"
        string rdf:definition = "A social norm."
    }

    class "_class_Parthood" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Parthood"
        string rdf:definition = "A special kind of Situation that allows to include time indexing for the hasPart relation in situations. For example, if a Situation s 'finally, my bike has a luggage rack' isSettingFor the entity 'my bike' and the TimeIntervals 'now', or more specifically '29March2021', we need to have a time-index the part relation. With Parthood, we use includesWhole and includesPart properties. This can be done similarly for other arguments of parthood, e.g. location, configuration, topology, etc. Concerning the possible property characteristics reused from mereology (transitivity, asymmetry, reflexivity), they need to be implemented by means of rules (or, in a limited way, property chains using the binary hasPart or hasProperPart properties). A key is also added to ensure identification constraints of time-indexed parthood."
    }

    class "_class_Pattern" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Pattern"
        string rdf:definition = "Any invariance detected from a dataset, or from observation; also, any invariance proposed based on top-down considerations. E.g. patterns detected and abstracted by an organism, by pattern recognition algorithms, by machine learning techniques, etc. An occurrence of a pattern is an 'observable', or detected Situation"
    }

    class "_class_Personification" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Personification"
        string rdf:definition = "A social entity with agentive features, but whose status is the result of a cultural transformation from e.g. a PhysicalObject, an Event, an Abstract, another SocialObject, etc. For example: the holy grail, deus ex machina, gods, magic wands, etc."
    }

    class "_class_Place" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Place"
        string rdf:definition = "Socially or cognitively dependent locations: political geographic entities (Rome, Lesotho), and non-material locations determined by the presence of other entities (\"the area close to Rome\") or of pivot events or signs (\"the area where the helicopter fell\"), as well as identified as complements to other entities (\"the area under the table\"), etc. In this generic sense, a Place is a 'dependent' location. For 'non-dependent' locations, cf. the PhysicalPlace class. For an abstract (dimensional) location, cf. the SpaceRegion class."
    }

    class "_class_PlanExecution" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "PlanExecution"
        string rdf:definition = "Plan executions are situations that proactively satisfy a plan. Subplan executions are proper parts of the whole plan execution."
    }

    class "_class_Project" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Project"
        string rdf:definition = "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed in relation to goals to be achieved, in order to achieve the main goal of the project. In other words, a project is a plan with a subgoal structure and multiple roles and tasks."
    }

    class "_class_Right" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "Right"
        string rdf:definition = "A legal position by which an Agent is entitled to obtain something from another Agent , under specified circumstances, through an enforcement explicited either in a Law, Contract , etc."
    }

    class "_class_SocialPerson" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SocialPerson"
        string rdf:definition = "A SocialAgent that needs the existence of a specific NaturalPerson in order to act (but the lifetime of the NaturalPerson has only to overlap that of the SocialPerson)."
    }

    class "_class_SpatioTemporalRegion" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "SpatioTemporalRegion"
    }

    class "_class_TypeCollection" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "TypeCollection"
        string rdf:definition = 'A Collection whose members are the maximal set of individuals that share the same (named) type, e.g. "the gem stones", "the Italians". This class is very useful to apply a variety of the so-called "ClassesAsValues" design pattern, when it is used to talk about the extensional aspect of a class. An alternative variety of the pattern applies to the intensional aspect of a class, and the class Concept should be used instead.'
    }

    class "_class_UnitOfMeasure" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "UnitOfMeasure"
        string rdf:definition = "Units of measure are conceptualized here as parameters on regions, which can be valued as datatype values."
    }

    class "_class_WorkflowExecution" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_DUL_namespace>
    )
    {
        string rdf:conceptName = "WorkflowExecution"
    }
}

class "_class_owl_namespace" (
    prepend apiSchemas = ["RdfAPI"]
)
{
    string rdf:namespace = "http://www.w3.org/2002/07/owl#"
}

def "owl"
{
    class "_class_Thing" (
        prepend apiSchemas = ["RdfAPI"]
        prepend inherits = </_class_owl_namespace>
    )
    {
        string rdf:conceptName = "Thing"
    }
}

